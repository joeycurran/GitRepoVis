{"ast":null,"code":"'use strict';\n\nmodule.exports = createViewController;\n\nvar createTurntable = require('turntable-camera-controller');\n\nvar createOrbit = require('orbit-camera-controller');\n\nvar createMatrix = require('matrix-camera-controller');\n\nfunction ViewController(controllers, mode) {\n  this._controllerNames = Object.keys(controllers);\n  this._controllerList = this._controllerNames.map(function (n) {\n    return controllers[n];\n  });\n  this._mode = mode;\n  this._active = controllers[mode];\n\n  if (!this._active) {\n    this._mode = 'turntable';\n    this._active = controllers.turntable;\n  }\n\n  this.modes = this._controllerNames;\n  this.computedMatrix = this._active.computedMatrix;\n  this.computedEye = this._active.computedEye;\n  this.computedUp = this._active.computedUp;\n  this.computedCenter = this._active.computedCenter;\n  this.computedRadius = this._active.computedRadius;\n}\n\nvar proto = ViewController.prototype;\nvar COMMON_METHODS = [['flush', 1], ['idle', 1], ['lookAt', 4], ['rotate', 4], ['pan', 4], ['translate', 4], ['setMatrix', 2], ['setDistanceLimits', 2], ['setDistance', 2]];\nCOMMON_METHODS.forEach(function (method) {\n  var name = method[0];\n  var argNames = [];\n\n  for (var i = 0; i < method[1]; ++i) {\n    argNames.push('a' + i);\n  }\n\n  var code = 'var cc=this._controllerList;for(var i=0;i<cc.length;++i){cc[i].' + method[0] + '(' + argNames.join() + ')}';\n  proto[name] = Function.apply(null, argNames.concat(code));\n});\n\nproto.recalcMatrix = function (t) {\n  this._active.recalcMatrix(t);\n};\n\nproto.getDistance = function (t) {\n  return this._active.getDistance(t);\n};\n\nproto.getDistanceLimits = function (out) {\n  return this._active.getDistanceLimits(out);\n};\n\nproto.lastT = function () {\n  return this._active.lastT();\n};\n\nproto.setMode = function (mode) {\n  if (mode === this._mode) {\n    return;\n  }\n\n  var idx = this._controllerNames.indexOf(mode);\n\n  if (idx < 0) {\n    return;\n  }\n\n  var prev = this._active;\n  var next = this._controllerList[idx];\n  var lastT = Math.max(prev.lastT(), next.lastT());\n  prev.recalcMatrix(lastT);\n  next.setMatrix(lastT, prev.computedMatrix);\n  this._active = next;\n  this._mode = mode; //Update matrix properties\n\n  this.computedMatrix = this._active.computedMatrix;\n  this.computedEye = this._active.computedEye;\n  this.computedUp = this._active.computedUp;\n  this.computedCenter = this._active.computedCenter;\n  this.computedRadius = this._active.computedRadius;\n};\n\nproto.getMode = function () {\n  return this._mode;\n};\n\nfunction createViewController(options) {\n  options = options || {};\n  var eye = options.eye || [0, 0, 1];\n  var center = options.center || [0, 0, 0];\n  var up = options.up || [0, 1, 0];\n  var limits = options.distanceLimits || [0, Infinity];\n  var mode = options.mode || 'turntable';\n  var turntable = createTurntable();\n  var orbit = createOrbit();\n  var matrix = createMatrix();\n  turntable.setDistanceLimits(limits[0], limits[1]);\n  turntable.lookAt(0, eye, center, up);\n  orbit.setDistanceLimits(limits[0], limits[1]);\n  orbit.lookAt(0, eye, center, up);\n  matrix.setDistanceLimits(limits[0], limits[1]);\n  matrix.lookAt(0, eye, center, up);\n  return new ViewController({\n    turntable: turntable,\n    orbit: orbit,\n    matrix: matrix\n  }, mode);\n}","map":null,"metadata":{},"sourceType":"script"}