{"ast":null,"code":"'use strict';\n\nmodule.exports = makeReflectTypes; //Construct type info for reflection.\n//\n// This iterates over the flattened list of uniform type values and smashes them into a JSON object.\n//\n// The leaves of the resulting object are either indices or type strings representing primitive glslify types\n\nfunction makeReflectTypes(uniforms, useIndex) {\n  var obj = {};\n\n  for (var i = 0; i < uniforms.length; ++i) {\n    var n = uniforms[i].name;\n    var parts = n.split(\".\");\n    var o = obj;\n\n    for (var j = 0; j < parts.length; ++j) {\n      var x = parts[j].split(\"[\");\n\n      if (x.length > 1) {\n        if (!(x[0] in o)) {\n          o[x[0]] = [];\n        }\n\n        o = o[x[0]];\n\n        for (var k = 1; k < x.length; ++k) {\n          var y = parseInt(x[k]);\n\n          if (k < x.length - 1 || j < parts.length - 1) {\n            if (!(y in o)) {\n              if (k < x.length - 1) {\n                o[y] = [];\n              } else {\n                o[y] = {};\n              }\n            }\n\n            o = o[y];\n          } else {\n            if (useIndex) {\n              o[y] = i;\n            } else {\n              o[y] = uniforms[i].type;\n            }\n          }\n        }\n      } else if (j < parts.length - 1) {\n        if (!(x[0] in o)) {\n          o[x[0]] = {};\n        }\n\n        o = o[x[0]];\n      } else {\n        if (useIndex) {\n          o[x[0]] = i;\n        } else {\n          o[x[0]] = uniforms[i].type;\n        }\n      }\n    }\n  }\n\n  return obj;\n}","map":null,"metadata":{},"sourceType":"script"}