{"ast":null,"code":"\"use strict\";\n\nmodule.exports = robustSubtract; //Easy case: Add two scalars\n\nfunction scalarScalar(a, b) {\n  var x = a + b;\n  var bv = x - a;\n  var av = x - bv;\n  var br = b - bv;\n  var ar = a - av;\n  var y = ar + br;\n\n  if (y) {\n    return [y, x];\n  }\n\n  return [x];\n}\n\nfunction robustSubtract(e, f) {\n  var ne = e.length | 0;\n  var nf = f.length | 0;\n\n  if (ne === 1 && nf === 1) {\n    return scalarScalar(e[0], -f[0]);\n  }\n\n  var n = ne + nf;\n  var g = new Array(n);\n  var count = 0;\n  var eptr = 0;\n  var fptr = 0;\n  var abs = Math.abs;\n  var ei = e[eptr];\n  var ea = abs(ei);\n  var fi = -f[fptr];\n  var fa = abs(fi);\n  var a, b;\n\n  if (ea < fa) {\n    b = ei;\n    eptr += 1;\n\n    if (eptr < ne) {\n      ei = e[eptr];\n      ea = abs(ei);\n    }\n  } else {\n    b = fi;\n    fptr += 1;\n\n    if (fptr < nf) {\n      fi = -f[fptr];\n      fa = abs(fi);\n    }\n  }\n\n  if (eptr < ne && ea < fa || fptr >= nf) {\n    a = ei;\n    eptr += 1;\n\n    if (eptr < ne) {\n      ei = e[eptr];\n      ea = abs(ei);\n    }\n  } else {\n    a = fi;\n    fptr += 1;\n\n    if (fptr < nf) {\n      fi = -f[fptr];\n      fa = abs(fi);\n    }\n  }\n\n  var x = a + b;\n  var bv = x - a;\n  var y = b - bv;\n  var q0 = y;\n  var q1 = x;\n\n  var _x, _bv, _av, _br, _ar;\n\n  while (eptr < ne && fptr < nf) {\n    if (ea < fa) {\n      a = ei;\n      eptr += 1;\n\n      if (eptr < ne) {\n        ei = e[eptr];\n        ea = abs(ei);\n      }\n    } else {\n      a = fi;\n      fptr += 1;\n\n      if (fptr < nf) {\n        fi = -f[fptr];\n        fa = abs(fi);\n      }\n    }\n\n    b = q0;\n    x = a + b;\n    bv = x - a;\n    y = b - bv;\n\n    if (y) {\n      g[count++] = y;\n    }\n\n    _x = q1 + x;\n    _bv = _x - q1;\n    _av = _x - _bv;\n    _br = x - _bv;\n    _ar = q1 - _av;\n    q0 = _ar + _br;\n    q1 = _x;\n  }\n\n  while (eptr < ne) {\n    a = ei;\n    b = q0;\n    x = a + b;\n    bv = x - a;\n    y = b - bv;\n\n    if (y) {\n      g[count++] = y;\n    }\n\n    _x = q1 + x;\n    _bv = _x - q1;\n    _av = _x - _bv;\n    _br = x - _bv;\n    _ar = q1 - _av;\n    q0 = _ar + _br;\n    q1 = _x;\n    eptr += 1;\n\n    if (eptr < ne) {\n      ei = e[eptr];\n    }\n  }\n\n  while (fptr < nf) {\n    a = fi;\n    b = q0;\n    x = a + b;\n    bv = x - a;\n    y = b - bv;\n\n    if (y) {\n      g[count++] = y;\n    }\n\n    _x = q1 + x;\n    _bv = _x - q1;\n    _av = _x - _bv;\n    _br = x - _bv;\n    _ar = q1 - _av;\n    q0 = _ar + _br;\n    q1 = _x;\n    fptr += 1;\n\n    if (fptr < nf) {\n      fi = -f[fptr];\n    }\n  }\n\n  if (q0) {\n    g[count++] = q0;\n  }\n\n  if (q1) {\n    g[count++] = q1;\n  }\n\n  if (!count) {\n    g[count++] = 0.0;\n  }\n\n  g.length = count;\n  return g;\n}","map":null,"metadata":{},"sourceType":"script"}