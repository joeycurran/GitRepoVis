{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n'use strict';\n\nvar scatterPlot = require('../scatter/plot');\n\nvar Axes = require('../../plots/cartesian/axes');\n\nvar Drawing = require('../../components/drawing');\n\nmodule.exports = function plot(gd, plotinfoproxy, data, layer) {\n  var i, trace, node;\n  var carpet = data[0][0].carpet; // mimic cartesian plotinfo\n\n  var plotinfo = {\n    xaxis: Axes.getFromId(gd, carpet.xaxis || 'x'),\n    yaxis: Axes.getFromId(gd, carpet.yaxis || 'y'),\n    plot: plotinfoproxy.plot\n  };\n  scatterPlot(gd, plotinfo, data, layer);\n\n  for (i = 0; i < data.length; i++) {\n    trace = data[i][0].trace; // Note: .select is adequate but seems to mutate the node data,\n    // which is at least a bit suprising and causes problems elsewhere\n\n    node = layer.selectAll('g.trace' + trace.uid + ' .js-line'); // Note: it would be more efficient if this didn't need to be applied\n    // separately to all scattercarpet traces, but that would require\n    // lots of reorganization of scatter traces that is otherwise not\n    // necessary. That makes this a potential optimization.\n\n    Drawing.setClipUrl(node, data[i][0].carpet._clipPathId, gd);\n  }\n};","map":null,"metadata":{},"sourceType":"script"}