{"ast":null,"code":"\"use strict\";\n\nvar pool = require(\"typedarray-pool\");\n\nvar ops = require(\"ndarray-ops\");\n\nvar ndarray = require(\"ndarray\");\n\nvar SUPPORTED_TYPES = [\"uint8\", \"uint8_clamped\", \"uint16\", \"uint32\", \"int8\", \"int16\", \"int32\", \"float32\"];\n\nfunction GLBuffer(gl, type, handle, length, usage) {\n  this.gl = gl;\n  this.type = type;\n  this.handle = handle;\n  this.length = length;\n  this.usage = usage;\n}\n\nvar proto = GLBuffer.prototype;\n\nproto.bind = function () {\n  this.gl.bindBuffer(this.type, this.handle);\n};\n\nproto.unbind = function () {\n  this.gl.bindBuffer(this.type, null);\n};\n\nproto.dispose = function () {\n  this.gl.deleteBuffer(this.handle);\n};\n\nfunction updateTypeArray(gl, type, len, usage, data, offset) {\n  var dataLen = data.length * data.BYTES_PER_ELEMENT;\n\n  if (offset < 0) {\n    gl.bufferData(type, data, usage);\n    return dataLen;\n  }\n\n  if (dataLen + offset > len) {\n    throw new Error(\"gl-buffer: If resizing buffer, must not specify offset\");\n  }\n\n  gl.bufferSubData(type, offset, data);\n  return len;\n}\n\nfunction makeScratchTypeArray(array, dtype) {\n  var res = pool.malloc(array.length, dtype);\n  var n = array.length;\n\n  for (var i = 0; i < n; ++i) {\n    res[i] = array[i];\n  }\n\n  return res;\n}\n\nfunction isPacked(shape, stride) {\n  var n = 1;\n\n  for (var i = stride.length - 1; i >= 0; --i) {\n    if (stride[i] !== n) {\n      return false;\n    }\n\n    n *= shape[i];\n  }\n\n  return true;\n}\n\nproto.update = function (array, offset) {\n  if (typeof offset !== \"number\") {\n    offset = -1;\n  }\n\n  this.bind();\n\n  if (typeof array === \"object\" && typeof array.shape !== \"undefined\") {\n    //ndarray\n    var dtype = array.dtype;\n\n    if (SUPPORTED_TYPES.indexOf(dtype) < 0) {\n      dtype = \"float32\";\n    }\n\n    if (this.type === this.gl.ELEMENT_ARRAY_BUFFER) {\n      var ext = gl.getExtension('OES_element_index_uint');\n\n      if (ext && dtype !== \"uint16\") {\n        dtype = \"uint32\";\n      } else {\n        dtype = \"uint16\";\n      }\n    }\n\n    if (dtype === array.dtype && isPacked(array.shape, array.stride)) {\n      if (array.offset === 0 && array.data.length === array.shape[0]) {\n        this.length = updateTypeArray(this.gl, this.type, this.length, this.usage, array.data, offset);\n      } else {\n        this.length = updateTypeArray(this.gl, this.type, this.length, this.usage, array.data.subarray(array.offset, array.shape[0]), offset);\n      }\n    } else {\n      var tmp = pool.malloc(array.size, dtype);\n      var ndt = ndarray(tmp, array.shape);\n      ops.assign(ndt, array);\n\n      if (offset < 0) {\n        this.length = updateTypeArray(this.gl, this.type, this.length, this.usage, tmp, offset);\n      } else {\n        this.length = updateTypeArray(this.gl, this.type, this.length, this.usage, tmp.subarray(0, array.size), offset);\n      }\n\n      pool.free(tmp);\n    }\n  } else if (Array.isArray(array)) {\n    //Vanilla array\n    var t;\n\n    if (this.type === this.gl.ELEMENT_ARRAY_BUFFER) {\n      t = makeScratchTypeArray(array, \"uint16\");\n    } else {\n      t = makeScratchTypeArray(array, \"float32\");\n    }\n\n    if (offset < 0) {\n      this.length = updateTypeArray(this.gl, this.type, this.length, this.usage, t, offset);\n    } else {\n      this.length = updateTypeArray(this.gl, this.type, this.length, this.usage, t.subarray(0, array.length), offset);\n    }\n\n    pool.free(t);\n  } else if (typeof array === \"object\" && typeof array.length === \"number\") {\n    //Typed array\n    this.length = updateTypeArray(this.gl, this.type, this.length, this.usage, array, offset);\n  } else if (typeof array === \"number\" || array === undefined) {\n    //Number/default\n    if (offset >= 0) {\n      throw new Error(\"gl-buffer: Cannot specify offset when resizing buffer\");\n    }\n\n    array = array | 0;\n\n    if (array <= 0) {\n      array = 1;\n    }\n\n    this.gl.bufferData(this.type, array | 0, this.usage);\n    this.length = array;\n  } else {\n    //Error, case should not happen\n    throw new Error(\"gl-buffer: Invalid data type\");\n  }\n};\n\nfunction createBuffer(gl, data, type, usage) {\n  type = type || gl.ARRAY_BUFFER;\n  usage = usage || gl.DYNAMIC_DRAW;\n\n  if (type !== gl.ARRAY_BUFFER && type !== gl.ELEMENT_ARRAY_BUFFER) {\n    throw new Error(\"gl-buffer: Invalid type for webgl buffer, must be either gl.ARRAY_BUFFER or gl.ELEMENT_ARRAY_BUFFER\");\n  }\n\n  if (usage !== gl.DYNAMIC_DRAW && usage !== gl.STATIC_DRAW && usage !== gl.STREAM_DRAW) {\n    throw new Error(\"gl-buffer: Invalid usage for buffer, must be either gl.DYNAMIC_DRAW, gl.STATIC_DRAW or gl.STREAM_DRAW\");\n  }\n\n  var handle = gl.createBuffer();\n  var result = new GLBuffer(gl, type, handle, 0, usage);\n  result.update(data);\n  return result;\n}\n\nmodule.exports = createBuffer;","map":null,"metadata":{},"sourceType":"script"}