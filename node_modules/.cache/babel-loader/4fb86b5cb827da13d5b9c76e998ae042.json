{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n'use strict';\n\nvar convert = require('./convert');\n\nvar LAYER_PREFIX = require('../../plots/mapbox/constants').traceLayerPrefix;\n\nvar ORDER = ['fill', 'line', 'circle', 'symbol'];\n\nfunction ScatterMapbox(subplot, uid) {\n  this.type = 'scattermapbox';\n  this.subplot = subplot;\n  this.uid = uid;\n  this.sourceIds = {\n    fill: 'source-' + uid + '-fill',\n    line: 'source-' + uid + '-line',\n    circle: 'source-' + uid + '-circle',\n    symbol: 'source-' + uid + '-symbol'\n  };\n  this.layerIds = {\n    fill: LAYER_PREFIX + uid + '-fill',\n    line: LAYER_PREFIX + uid + '-line',\n    circle: LAYER_PREFIX + uid + '-circle',\n    symbol: LAYER_PREFIX + uid + '-symbol'\n  }; // We could merge the 'fill' source with the 'line' source and\n  // the 'circle' source with the 'symbol' source if ever having\n  // for up-to 4 sources per 'scattermapbox' traces becomes a problem.\n  // previous 'below' value,\n  // need this to update it properly\n\n  this.below = null;\n}\n\nvar proto = ScatterMapbox.prototype;\n\nproto.addSource = function (k, opts) {\n  this.subplot.map.addSource(this.sourceIds[k], {\n    type: 'geojson',\n    data: opts.geojson\n  });\n};\n\nproto.setSourceData = function (k, opts) {\n  this.subplot.map.getSource(this.sourceIds[k]).setData(opts.geojson);\n};\n\nproto.addLayer = function (k, opts, below) {\n  this.subplot.addLayer({\n    type: k,\n    id: this.layerIds[k],\n    source: this.sourceIds[k],\n    layout: opts.layout,\n    paint: opts.paint\n  }, below);\n};\n\nproto.update = function update(calcTrace) {\n  var subplot = this.subplot;\n  var map = subplot.map;\n  var optsAll = convert(subplot.gd, calcTrace);\n  var below = subplot.belowLookup['trace-' + this.uid];\n  var i, k, opts;\n\n  if (below !== this.below) {\n    for (i = ORDER.length - 1; i >= 0; i--) {\n      k = ORDER[i];\n      map.removeLayer(this.layerIds[k]);\n    }\n\n    for (i = 0; i < ORDER.length; i++) {\n      k = ORDER[i];\n      opts = optsAll[k];\n      this.addLayer(k, opts, below);\n    }\n\n    this.below = below;\n  }\n\n  for (i = 0; i < ORDER.length; i++) {\n    k = ORDER[i];\n    opts = optsAll[k];\n    subplot.setOptions(this.layerIds[k], 'setLayoutProperty', opts.layout);\n\n    if (opts.layout.visibility === 'visible') {\n      this.setSourceData(k, opts);\n      subplot.setOptions(this.layerIds[k], 'setPaintProperty', opts.paint);\n    }\n  } // link ref for quick update during selections\n\n\n  calcTrace[0].trace._glTrace = this;\n};\n\nproto.dispose = function dispose() {\n  var map = this.subplot.map;\n\n  for (var i = ORDER.length - 1; i >= 0; i--) {\n    var k = ORDER[i];\n    map.removeLayer(this.layerIds[k]);\n    map.removeSource(this.sourceIds[k]);\n  }\n};\n\nmodule.exports = function createScatterMapbox(subplot, calcTrace) {\n  var trace = calcTrace[0].trace;\n  var scatterMapbox = new ScatterMapbox(subplot, trace.uid);\n  var optsAll = convert(subplot.gd, calcTrace);\n  var below = scatterMapbox.below = subplot.belowLookup['trace-' + trace.uid];\n\n  for (var i = 0; i < ORDER.length; i++) {\n    var k = ORDER[i];\n    var opts = optsAll[k];\n    scatterMapbox.addSource(k, opts);\n    scatterMapbox.addLayer(k, opts, below);\n  } // link ref for quick update during selections\n\n\n  calcTrace[0].trace._glTrace = scatterMapbox;\n  return scatterMapbox;\n};","map":null,"metadata":{},"sourceType":"script"}