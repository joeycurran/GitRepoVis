{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n'use strict';\n\nvar hoverLabelText = require('../../plots/cartesian/axes').hoverLabelText;\n\nvar opacity = require('../../components/color').opacity;\n\nvar hoverOnBars = require('../bar/hover').hoverOnBars;\n\nvar delta = require('../../constants/delta.js');\n\nvar DIRSYMBOL = {\n  increasing: delta.INCREASING.SYMBOL,\n  decreasing: delta.DECREASING.SYMBOL\n};\n\nmodule.exports = function hoverPoints(pointData, xval, yval, hovermode) {\n  var point = hoverOnBars(pointData, xval, yval, hovermode);\n  if (!point) return;\n  var cd = point.cd;\n  var trace = cd[0].trace;\n  var isHorizontal = trace.orientation === 'h';\n  var vAxis = isHorizontal ? pointData.xa : pointData.ya;\n\n  function formatNumber(a) {\n    return hoverLabelText(vAxis, a);\n  } // the closest data point\n\n\n  var index = point.index;\n  var di = cd[index];\n  var size = di.isSum ? di.b + di.s : di.rawS;\n\n  if (!di.isSum) {\n    point.initial = di.b + di.s - size;\n    point.delta = size;\n    point.final = point.initial + point.delta;\n    var v = formatNumber(Math.abs(point.delta));\n    point.deltaLabel = size < 0 ? '(' + v + ')' : v;\n    point.finalLabel = formatNumber(point.final);\n    point.initialLabel = formatNumber(point.initial);\n  }\n\n  var hoverinfo = di.hi || trace.hoverinfo;\n  var text = [];\n\n  if (hoverinfo && hoverinfo !== 'none' && hoverinfo !== 'skip') {\n    var isAll = hoverinfo === 'all';\n    var parts = hoverinfo.split('+');\n\n    var hasFlag = function (flag) {\n      return isAll || parts.indexOf(flag) !== -1;\n    };\n\n    if (!di.isSum) {\n      if (hasFlag('final') && (isHorizontal ? !hasFlag('x') : !hasFlag('y')) // don't display redundant info.\n      ) {\n          text.push(point.finalLabel);\n        }\n\n      if (hasFlag('delta')) {\n        if (size < 0) {\n          text.push(point.deltaLabel + ' ' + DIRSYMBOL.decreasing);\n        } else {\n          text.push(point.deltaLabel + ' ' + DIRSYMBOL.increasing);\n        }\n      }\n\n      if (hasFlag('initial')) {\n        text.push('Initial: ' + point.initialLabel);\n      }\n    }\n  }\n\n  if (text.length) point.extraText = text.join('<br>');\n  point.color = getTraceColor(trace, di);\n  return [point];\n};\n\nfunction getTraceColor(trace, di) {\n  var cont = trace[di.dir].marker;\n  var mc = cont.color;\n  var mlc = cont.line.color;\n  var mlw = cont.line.width;\n  if (opacity(mc)) return mc;else if (opacity(mlc) && mlw) return mlc;\n}","map":null,"metadata":{},"sourceType":"script"}