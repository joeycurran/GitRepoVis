{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n'use strict';\n\nvar annAttrs = require('../../components/annotations/attributes');\n\nvar extendFlat = require('../../lib/extend').extendFlat;\n\nvar overrideAll = require('../../plot_api/edit_types').overrideAll;\n\nvar fontAttrs = require('../../plots/font_attributes');\n\nvar domainAttrs = require('../../plots/domain').attributes;\n\nvar FORMAT_LINK = require('../../constants/docs').FORMAT_LINK;\n\nvar attrs = module.exports = overrideAll({\n  domain: domainAttrs({\n    name: 'table',\n    trace: true\n  }),\n  columnwidth: {\n    valType: 'number',\n    arrayOk: true,\n    dflt: null,\n    role: 'style',\n    description: ['The width of columns expressed as a ratio. Columns fill the available width', 'in proportion of their specified column widths.'].join(' ')\n  },\n  columnorder: {\n    valType: 'data_array',\n    role: 'info',\n    description: ['Specifies the rendered order of the data columns; for example, a value `2` at position `0`', 'means that column index `0` in the data will be rendered as the', 'third column, as columns have an index base of zero.'].join(' ')\n  },\n  header: {\n    values: {\n      valType: 'data_array',\n      role: 'info',\n      dflt: [],\n      description: ['Header cell values. `values[m][n]` represents the value of the `n`th point in column `m`,', 'therefore the `values[m]` vector length for all columns must be the same (longer vectors', 'will be truncated). Each value must be a finite number or a string.'].join(' ')\n    },\n    format: {\n      valType: 'data_array',\n      role: 'info',\n      dflt: [],\n      description: ['Sets the cell value formatting rule using d3 formatting mini-language', 'which is similar to those of Python. See', FORMAT_LINK].join(' ')\n    },\n    prefix: {\n      valType: 'string',\n      arrayOk: true,\n      dflt: null,\n      role: 'style',\n      description: 'Prefix for cell values.'\n    },\n    suffix: {\n      valType: 'string',\n      arrayOk: true,\n      dflt: null,\n      role: 'style',\n      description: 'Suffix for cell values.'\n    },\n    height: {\n      valType: 'number',\n      dflt: 28,\n      role: 'style',\n      description: 'The height of cells.'\n    },\n    align: extendFlat({}, annAttrs.align, {\n      arrayOk: true\n    }),\n    line: {\n      width: {\n        valType: 'number',\n        arrayOk: true,\n        dflt: 1,\n        role: 'style'\n      },\n      color: {\n        valType: 'color',\n        arrayOk: true,\n        dflt: 'grey',\n        role: 'style'\n      }\n    },\n    fill: {\n      color: {\n        valType: 'color',\n        arrayOk: true,\n        dflt: 'white',\n        role: 'style',\n        description: ['Sets the cell fill color. It accepts either a specific color', ' or an array of colors or a 2D array of colors.'].join('')\n      }\n    },\n    font: extendFlat({}, fontAttrs({\n      arrayOk: true\n    }))\n  },\n  cells: {\n    values: {\n      valType: 'data_array',\n      role: 'info',\n      dflt: [],\n      description: ['Cell values. `values[m][n]` represents the value of the `n`th point in column `m`,', 'therefore the `values[m]` vector length for all columns must be the same (longer vectors', 'will be truncated). Each value must be a finite number or a string.'].join(' ')\n    },\n    format: {\n      valType: 'data_array',\n      role: 'info',\n      dflt: [],\n      description: ['Sets the cell value formatting rule using d3 formatting mini-language', 'which is similar to those of Python. See', FORMAT_LINK].join(' ')\n    },\n    prefix: {\n      valType: 'string',\n      arrayOk: true,\n      dflt: null,\n      role: 'style',\n      description: 'Prefix for cell values.'\n    },\n    suffix: {\n      valType: 'string',\n      arrayOk: true,\n      dflt: null,\n      role: 'style',\n      description: 'Suffix for cell values.'\n    },\n    height: {\n      valType: 'number',\n      dflt: 20,\n      role: 'style',\n      description: 'The height of cells.'\n    },\n    align: extendFlat({}, annAttrs.align, {\n      arrayOk: true\n    }),\n    line: {\n      width: {\n        valType: 'number',\n        arrayOk: true,\n        dflt: 1,\n        role: 'style'\n      },\n      color: {\n        valType: 'color',\n        arrayOk: true,\n        dflt: 'grey',\n        role: 'style'\n      }\n    },\n    fill: {\n      color: {\n        valType: 'color',\n        arrayOk: true,\n        role: 'style',\n        dflt: 'white',\n        description: ['Sets the cell fill color. It accepts either a specific color', ' or an array of colors or a 2D array of colors.'].join('')\n      }\n    },\n    font: extendFlat({}, fontAttrs({\n      arrayOk: true\n    }))\n  }\n}, 'calc', 'from-root');\nattrs.transforms = undefined;","map":null,"metadata":{},"sourceType":"script"}