{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n'use strict';\n\nvar isNumeric = require('fast-isnumeric');\n\nvar Lib = require('../../lib');\n\nvar _ = Lib._;\n\nvar Axes = require('../../plots/cartesian/axes'); // outlier definition based on http://www.physics.csbsju.edu/stats/box2.html\n\n\nmodule.exports = function calc(gd, trace) {\n  var fullLayout = gd._fullLayout;\n  var xa = Axes.getFromId(gd, trace.xaxis || 'x');\n  var ya = Axes.getFromId(gd, trace.yaxis || 'y');\n  var cd = []; // N.B. violin reuses same Box.calc\n\n  var numKey = trace.type === 'violin' ? '_numViolins' : '_numBoxes';\n  var i;\n  var valAxis, valLetter;\n  var posAxis, posLetter;\n\n  if (trace.orientation === 'h') {\n    valAxis = xa;\n    valLetter = 'x';\n    posAxis = ya;\n    posLetter = 'y';\n  } else {\n    valAxis = ya;\n    valLetter = 'y';\n    posAxis = xa;\n    posLetter = 'x';\n  }\n\n  var val = valAxis.makeCalcdata(trace, valLetter);\n  var pos = getPos(trace, posLetter, posAxis, val, fullLayout[numKey]);\n  var dv = Lib.distinctVals(pos);\n  var posDistinct = dv.vals;\n  var dPos = dv.minDiff / 2;\n  var posBins = makeBins(posDistinct, dPos);\n  var pLen = posDistinct.length;\n  var ptsPerBin = initNestedArray(pLen); // bin pts info per position bins\n\n  for (i = 0; i < trace._length; i++) {\n    var v = val[i];\n    if (!isNumeric(v)) continue;\n    var n = Lib.findBin(pos[i], posBins);\n\n    if (n >= 0 && n < pLen) {\n      var pt = {\n        v: v,\n        i: i\n      };\n      arraysToCalcdata(pt, trace, i);\n      ptsPerBin[n].push(pt);\n    }\n  }\n\n  var cdi;\n  var ptFilterFn = (trace.boxpoints || trace.points) === 'all' ? Lib.identity : function (pt) {\n    return pt.v < cdi.lf || pt.v > cdi.uf;\n  }; // build calcdata trace items, one item per distinct position\n\n  for (i = 0; i < pLen; i++) {\n    if (ptsPerBin[i].length > 0) {\n      var pts = ptsPerBin[i].sort(sortByVal);\n      var boxVals = pts.map(extractVal);\n      var bvLen = boxVals.length;\n      cdi = {};\n      cdi.pos = posDistinct[i];\n      cdi.pts = pts; // Sort categories by values\n\n      cdi[posLetter] = cdi.pos;\n      cdi[valLetter] = cdi.pts.map(function (pt) {\n        return pt.v;\n      });\n      cdi.min = boxVals[0];\n      cdi.max = boxVals[bvLen - 1];\n      cdi.mean = Lib.mean(boxVals, bvLen);\n      cdi.sd = Lib.stdev(boxVals, bvLen, cdi.mean); // first quartile\n\n      cdi.q1 = Lib.interp(boxVals, 0.25); // median\n\n      cdi.med = Lib.interp(boxVals, 0.5); // third quartile\n\n      cdi.q3 = Lib.interp(boxVals, 0.75); // lower and upper fences - last point inside\n      // 1.5 interquartile ranges from quartiles\n\n      cdi.lf = Math.min(cdi.q1, boxVals[Math.min(Lib.findBin(2.5 * cdi.q1 - 1.5 * cdi.q3, boxVals, true) + 1, bvLen - 1)]);\n      cdi.uf = Math.max(cdi.q3, boxVals[Math.max(Lib.findBin(2.5 * cdi.q3 - 1.5 * cdi.q1, boxVals), 0)]); // lower and upper outliers - 3 IQR out (don't clip to max/min,\n      // this is only for discriminating suspected & far outliers)\n\n      cdi.lo = 4 * cdi.q1 - 3 * cdi.q3;\n      cdi.uo = 4 * cdi.q3 - 3 * cdi.q1; // lower and upper notches ~95% Confidence Intervals for median\n\n      var iqr = cdi.q3 - cdi.q1;\n      var mci = 1.57 * iqr / Math.sqrt(bvLen);\n      cdi.ln = cdi.med - mci;\n      cdi.un = cdi.med + mci;\n      cdi.pts2 = pts.filter(ptFilterFn);\n      cd.push(cdi);\n    }\n  }\n\n  calcSelection(cd, trace);\n  var extremes = Axes.findExtremes(valAxis, val, {\n    padded: true\n  });\n  trace._extremes[valAxis._id] = extremes;\n\n  if (cd.length > 0) {\n    cd[0].t = {\n      num: fullLayout[numKey],\n      dPos: dPos,\n      posLetter: posLetter,\n      valLetter: valLetter,\n      labels: {\n        med: _(gd, 'median:'),\n        min: _(gd, 'min:'),\n        q1: _(gd, 'q1:'),\n        q3: _(gd, 'q3:'),\n        max: _(gd, 'max:'),\n        mean: trace.boxmean === 'sd' ? _(gd, 'mean ± σ:') : _(gd, 'mean:'),\n        lf: _(gd, 'lower fence:'),\n        uf: _(gd, 'upper fence:')\n      }\n    };\n    fullLayout[numKey]++;\n    return cd;\n  } else {\n    return [{\n      t: {\n        empty: true\n      }\n    }];\n  }\n}; // In vertical (horizontal) box plots:\n// if no x (y) data, use x0 (y0), or name\n// so if you want one box\n// per trace, set x0 (y0) to the x (y) value or category for this trace\n// (or set x (y) to a constant array matching y (x))\n\n\nfunction getPos(trace, posLetter, posAxis, val, num) {\n  if (posLetter in trace) {\n    return posAxis.makeCalcdata(trace, posLetter);\n  }\n\n  var pos0;\n\n  if (posLetter + '0' in trace) {\n    pos0 = trace[posLetter + '0'];\n  } else if ('name' in trace && (posAxis.type === 'category' || isNumeric(trace.name) && ['linear', 'log'].indexOf(posAxis.type) !== -1 || Lib.isDateTime(trace.name) && posAxis.type === 'date')) {\n    pos0 = trace.name;\n  } else {\n    pos0 = num;\n  }\n\n  var pos0c = posAxis.type === 'multicategory' ? posAxis.r2c_just_indices(pos0) : posAxis.d2c(pos0, 0, trace[posLetter + 'calendar']);\n  return val.map(function () {\n    return pos0c;\n  });\n}\n\nfunction makeBins(x, dx) {\n  var len = x.length;\n  var bins = new Array(len + 1);\n\n  for (var i = 0; i < len; i++) {\n    bins[i] = x[i] - dx;\n  }\n\n  bins[len] = x[len - 1] + dx;\n  return bins;\n}\n\nfunction initNestedArray(len) {\n  var arr = new Array(len);\n\n  for (var i = 0; i < len; i++) {\n    arr[i] = [];\n  }\n\n  return arr;\n}\n\nfunction arraysToCalcdata(pt, trace, i) {\n  var trace2calc = {\n    text: 'tx',\n    hovertext: 'htx'\n  };\n\n  for (var k in trace2calc) {\n    if (Array.isArray(trace[k])) {\n      pt[trace2calc[k]] = trace[k][i];\n    }\n  }\n}\n\nfunction calcSelection(cd, trace) {\n  if (Lib.isArrayOrTypedArray(trace.selectedpoints)) {\n    for (var i = 0; i < cd.length; i++) {\n      var pts = cd[i].pts || [];\n      var ptNumber2cdIndex = {};\n\n      for (var j = 0; j < pts.length; j++) {\n        ptNumber2cdIndex[pts[j].i] = j;\n      }\n\n      Lib.tagSelected(pts, trace, ptNumber2cdIndex);\n    }\n  }\n}\n\nfunction sortByVal(a, b) {\n  return a.v - b.v;\n}\n\nfunction extractVal(o) {\n  return o.v;\n}","map":null,"metadata":{},"sourceType":"script"}