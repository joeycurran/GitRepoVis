{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n'use strict';\n\nvar Lib = require('../../lib');\n\nvar attributes = require('./attributes');\n\nvar supplyIsoDefaults = require('../isosurface/defaults').supplyIsoDefaults;\n\nvar MIN = 0.1; // Note: often we don't want the data cube to be disappeared\n\nfunction createWave(n, minOpacity) {\n  var arr = [];\n  var steps = 32; // Max: 256\n\n  for (var i = 0; i < steps; i++) {\n    var u = i / (steps - 1);\n    var v = minOpacity + (1 - minOpacity) * (1 - Math.pow(Math.sin(n * u * Math.PI), 2));\n    arr.push([u, Math.max(1, Math.min(0, v))]);\n  }\n\n  return arr;\n}\n\nmodule.exports = function supplyDefaults(traceIn, traceOut, defaultColor, layout) {\n  function coerce(attr, dflt) {\n    return Lib.coerce(traceIn, traceOut, attributes, attr, dflt);\n  }\n\n  supplyIsoDefaults(traceIn, traceOut, defaultColor, layout, coerce);\n  var opacityscale = coerce('opacityscale');\n\n  if (opacityscale === 'max') {\n    traceOut.opacityscale = [[0, MIN], [1, 1]];\n  } else if (opacityscale === 'min') {\n    traceOut.opacityscale = [[0, 1], [1, MIN]];\n  } else if (opacityscale === 'extremes') {\n    traceOut.opacityscale = createWave(1, MIN);\n  } else if (!isValidScaleArray(opacityscale)) {\n    traceOut.opacityscale = undefined;\n  }\n};\n\nfunction isValidScaleArray(scl) {\n  var highestVal = 0;\n  if (!Array.isArray(scl) || scl.length < 2) return false;\n  if (!scl[0] || !scl[scl.length - 1]) return false;\n  if (+scl[0][0] !== 0 || +scl[scl.length - 1][0] !== 1) return false;\n\n  for (var i = 0; i < scl.length; i++) {\n    var si = scl[i];\n\n    if (si.length !== 2 || +si[0] < highestVal) {\n      return false;\n    }\n\n    highestVal = +si[0];\n  }\n\n  return true;\n}","map":null,"metadata":{},"sourceType":"script"}