{"ast":null,"code":"module.exports = tokenize;\n\nvar literals100 = require('./lib/literals'),\n    operators = require('./lib/operators'),\n    builtins100 = require('./lib/builtins'),\n    literals300es = require('./lib/literals-300es'),\n    builtins300es = require('./lib/builtins-300es');\n\nvar NORMAL = 999 // <-- never emitted\n,\n    TOKEN = 9999 // <-- never emitted\n,\n    BLOCK_COMMENT = 0,\n    LINE_COMMENT = 1,\n    PREPROCESSOR = 2,\n    OPERATOR = 3,\n    INTEGER = 4,\n    FLOAT = 5,\n    IDENT = 6,\n    BUILTIN = 7,\n    KEYWORD = 8,\n    WHITESPACE = 9,\n    EOF = 10,\n    HEX = 11;\nvar map = ['block-comment', 'line-comment', 'preprocessor', 'operator', 'integer', 'float', 'ident', 'builtin', 'keyword', 'whitespace', 'eof', 'integer'];\n\nfunction tokenize(opt) {\n  var i = 0,\n      total = 0,\n      mode = NORMAL,\n      c,\n      last,\n      content = [],\n      tokens = [],\n      token_idx = 0,\n      token_offs = 0,\n      line = 1,\n      col = 0,\n      start = 0,\n      isnum = false,\n      isoperator = false,\n      input = '',\n      len;\n  opt = opt || {};\n  var allBuiltins = builtins100;\n  var allLiterals = literals100;\n\n  if (opt.version === '300 es') {\n    allBuiltins = builtins300es;\n    allLiterals = literals300es;\n  } // cache by name\n\n\n  var builtinsDict = {},\n      literalsDict = {};\n\n  for (var i = 0; i < allBuiltins.length; i++) {\n    builtinsDict[allBuiltins[i]] = true;\n  }\n\n  for (var i = 0; i < allLiterals.length; i++) {\n    literalsDict[allLiterals[i]] = true;\n  }\n\n  return function (data) {\n    tokens = [];\n    if (data !== null) return write(data);\n    return end();\n  };\n\n  function token(data) {\n    if (data.length) {\n      tokens.push({\n        type: map[mode],\n        data: data,\n        position: start,\n        line: line,\n        column: col\n      });\n    }\n  }\n\n  function write(chunk) {\n    i = 0;\n    if (chunk.toString) chunk = chunk.toString();\n    input += chunk.replace(/\\r\\n/g, '\\n');\n    len = input.length;\n    var last;\n\n    while (c = input[i], i < len) {\n      last = i;\n\n      switch (mode) {\n        case BLOCK_COMMENT:\n          i = block_comment();\n          break;\n\n        case LINE_COMMENT:\n          i = line_comment();\n          break;\n\n        case PREPROCESSOR:\n          i = preprocessor();\n          break;\n\n        case OPERATOR:\n          i = operator();\n          break;\n\n        case INTEGER:\n          i = integer();\n          break;\n\n        case HEX:\n          i = hex();\n          break;\n\n        case FLOAT:\n          i = decimal();\n          break;\n\n        case TOKEN:\n          i = readtoken();\n          break;\n\n        case WHITESPACE:\n          i = whitespace();\n          break;\n\n        case NORMAL:\n          i = normal();\n          break;\n      }\n\n      if (last !== i) {\n        switch (input[last]) {\n          case '\\n':\n            col = 0;\n            ++line;\n            break;\n\n          default:\n            ++col;\n            break;\n        }\n      }\n    }\n\n    total += i;\n    input = input.slice(i);\n    return tokens;\n  }\n\n  function end(chunk) {\n    if (content.length) {\n      token(content.join(''));\n    }\n\n    mode = EOF;\n    token('(eof)');\n    return tokens;\n  }\n\n  function normal() {\n    content = content.length ? [] : content;\n\n    if (last === '/' && c === '*') {\n      start = total + i - 1;\n      mode = BLOCK_COMMENT;\n      last = c;\n      return i + 1;\n    }\n\n    if (last === '/' && c === '/') {\n      start = total + i - 1;\n      mode = LINE_COMMENT;\n      last = c;\n      return i + 1;\n    }\n\n    if (c === '#') {\n      mode = PREPROCESSOR;\n      start = total + i;\n      return i;\n    }\n\n    if (/\\s/.test(c)) {\n      mode = WHITESPACE;\n      start = total + i;\n      return i;\n    }\n\n    isnum = /\\d/.test(c);\n    isoperator = /[^\\w_]/.test(c);\n    start = total + i;\n    mode = isnum ? INTEGER : isoperator ? OPERATOR : TOKEN;\n    return i;\n  }\n\n  function whitespace() {\n    if (/[^\\s]/g.test(c)) {\n      token(content.join(''));\n      mode = NORMAL;\n      return i;\n    }\n\n    content.push(c);\n    last = c;\n    return i + 1;\n  }\n\n  function preprocessor() {\n    if ((c === '\\r' || c === '\\n') && last !== '\\\\') {\n      token(content.join(''));\n      mode = NORMAL;\n      return i;\n    }\n\n    content.push(c);\n    last = c;\n    return i + 1;\n  }\n\n  function line_comment() {\n    return preprocessor();\n  }\n\n  function block_comment() {\n    if (c === '/' && last === '*') {\n      content.push(c);\n      token(content.join(''));\n      mode = NORMAL;\n      return i + 1;\n    }\n\n    content.push(c);\n    last = c;\n    return i + 1;\n  }\n\n  function operator() {\n    if (last === '.' && /\\d/.test(c)) {\n      mode = FLOAT;\n      return i;\n    }\n\n    if (last === '/' && c === '*') {\n      mode = BLOCK_COMMENT;\n      return i;\n    }\n\n    if (last === '/' && c === '/') {\n      mode = LINE_COMMENT;\n      return i;\n    }\n\n    if (c === '.' && content.length) {\n      while (determine_operator(content));\n\n      mode = FLOAT;\n      return i;\n    }\n\n    if (c === ';' || c === ')' || c === '(') {\n      if (content.length) while (determine_operator(content));\n      token(c);\n      mode = NORMAL;\n      return i + 1;\n    }\n\n    var is_composite_operator = content.length === 2 && c !== '=';\n\n    if (/[\\w_\\d\\s]/.test(c) || is_composite_operator) {\n      while (determine_operator(content));\n\n      mode = NORMAL;\n      return i;\n    }\n\n    content.push(c);\n    last = c;\n    return i + 1;\n  }\n\n  function determine_operator(buf) {\n    var j = 0,\n        idx,\n        res;\n\n    do {\n      idx = operators.indexOf(buf.slice(0, buf.length + j).join(''));\n      res = operators[idx];\n\n      if (idx === -1) {\n        if (j-- + buf.length > 0) continue;\n        res = buf.slice(0, 1).join('');\n      }\n\n      token(res);\n      start += res.length;\n      content = content.slice(res.length);\n      return content.length;\n    } while (1);\n  }\n\n  function hex() {\n    if (/[^a-fA-F0-9]/.test(c)) {\n      token(content.join(''));\n      mode = NORMAL;\n      return i;\n    }\n\n    content.push(c);\n    last = c;\n    return i + 1;\n  }\n\n  function integer() {\n    if (c === '.') {\n      content.push(c);\n      mode = FLOAT;\n      last = c;\n      return i + 1;\n    }\n\n    if (/[eE]/.test(c)) {\n      content.push(c);\n      mode = FLOAT;\n      last = c;\n      return i + 1;\n    }\n\n    if (c === 'x' && content.length === 1 && content[0] === '0') {\n      mode = HEX;\n      content.push(c);\n      last = c;\n      return i + 1;\n    }\n\n    if (/[^\\d]/.test(c)) {\n      token(content.join(''));\n      mode = NORMAL;\n      return i;\n    }\n\n    content.push(c);\n    last = c;\n    return i + 1;\n  }\n\n  function decimal() {\n    if (c === 'f') {\n      content.push(c);\n      last = c;\n      i += 1;\n    }\n\n    if (/[eE]/.test(c)) {\n      content.push(c);\n      last = c;\n      return i + 1;\n    }\n\n    if ((c === '-' || c === '+') && /[eE]/.test(last)) {\n      content.push(c);\n      last = c;\n      return i + 1;\n    }\n\n    if (/[^\\d]/.test(c)) {\n      token(content.join(''));\n      mode = NORMAL;\n      return i;\n    }\n\n    content.push(c);\n    last = c;\n    return i + 1;\n  }\n\n  function readtoken() {\n    if (/[^\\d\\w_]/.test(c)) {\n      var contentstr = content.join('');\n\n      if (literalsDict[contentstr]) {\n        mode = KEYWORD;\n      } else if (builtinsDict[contentstr]) {\n        mode = BUILTIN;\n      } else {\n        mode = IDENT;\n      }\n\n      token(content.join(''));\n      mode = NORMAL;\n      return i;\n    }\n\n    content.push(c);\n    last = c;\n    return i + 1;\n  }\n}","map":null,"metadata":{},"sourceType":"script"}