{"ast":null,"code":"\"use strict\";\n\"use restrict\";\n\nmodule.exports = UnionFind;\n\nfunction UnionFind(count) {\n  this.roots = new Array(count);\n  this.ranks = new Array(count);\n\n  for (var i = 0; i < count; ++i) {\n    this.roots[i] = i;\n    this.ranks[i] = 0;\n  }\n}\n\nvar proto = UnionFind.prototype;\nObject.defineProperty(proto, \"length\", {\n  \"get\": function () {\n    return this.roots.length;\n  }\n});\n\nproto.makeSet = function () {\n  var n = this.roots.length;\n  this.roots.push(n);\n  this.ranks.push(0);\n  return n;\n};\n\nproto.find = function (x) {\n  var x0 = x;\n  var roots = this.roots;\n\n  while (roots[x] !== x) {\n    x = roots[x];\n  }\n\n  while (roots[x0] !== x) {\n    var y = roots[x0];\n    roots[x0] = x;\n    x0 = y;\n  }\n\n  return x;\n};\n\nproto.link = function (x, y) {\n  var xr = this.find(x),\n      yr = this.find(y);\n\n  if (xr === yr) {\n    return;\n  }\n\n  var ranks = this.ranks,\n      roots = this.roots,\n      xd = ranks[xr],\n      yd = ranks[yr];\n\n  if (xd < yd) {\n    roots[xr] = yr;\n  } else if (yd < xd) {\n    roots[yr] = xr;\n  } else {\n    roots[yr] = xr;\n    ++ranks[xr];\n  }\n};","map":null,"metadata":{},"sourceType":"script"}