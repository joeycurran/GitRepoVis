{"ast":null,"code":"'use strict';\n\nmodule.exports = createSelectBuffer;\n\nvar createFBO = require('gl-fbo');\n\nvar pool = require('typedarray-pool');\n\nvar ndarray = require('ndarray');\n\nvar cwise = require('cwise');\n\nvar nextPow2 = require('bit-twiddle').nextPow2;\n\nvar selectRange = cwise({\n  args: ['array', {\n    'offset': [0, 0, 1],\n    'array': 0\n  }, {\n    'offset': [0, 0, 2],\n    'array': 0\n  }, {\n    'offset': [0, 0, 3],\n    'array': 0\n  }, 'scalar', 'scalar', 'index'],\n  pre: function () {\n    this.closestD2 = 1e8;\n    this.closestX = -1;\n    this.closestY = -1;\n  },\n  body: function (r, g, b, a, x, y, idx) {\n    if (r < 255 || g < 255 || b < 255 || a < 255) {\n      var dx = x - idx[0];\n      var dy = y - idx[1];\n      var d2 = dx * dx + dy * dy;\n\n      if (d2 < this.closestD2) {\n        this.closestD2 = d2;\n        this.closestX = idx[0];\n        this.closestY = idx[1];\n      }\n    }\n  },\n  post: function () {\n    return [this.closestX, this.closestY, this.closestD2];\n  }\n});\n\nfunction SelectResult(x, y, id, value, distance) {\n  this.coord = [x, y];\n  this.id = id;\n  this.value = value;\n  this.distance = distance;\n}\n\nfunction SelectBuffer(gl, fbo, buffer) {\n  this.gl = gl;\n  this.fbo = fbo;\n  this.buffer = buffer;\n  this._readTimeout = null;\n  var self = this;\n\n  this._readCallback = function () {\n    if (!self.gl) {\n      return;\n    }\n\n    fbo.bind();\n    gl.readPixels(0, 0, fbo.shape[0], fbo.shape[1], gl.RGBA, gl.UNSIGNED_BYTE, self.buffer);\n    self._readTimeout = null;\n  };\n}\n\nvar proto = SelectBuffer.prototype;\nObject.defineProperty(proto, 'shape', {\n  get: function () {\n    if (!this.gl) {\n      return [0, 0];\n    }\n\n    return this.fbo.shape.slice();\n  },\n  set: function (v) {\n    if (!this.gl) {\n      return;\n    }\n\n    this.fbo.shape = v;\n    var c = this.fbo.shape[0];\n    var r = this.fbo.shape[1];\n\n    if (r * c * 4 > this.buffer.length) {\n      pool.free(this.buffer);\n      var buffer = this.buffer = pool.mallocUint8(nextPow2(r * c * 4));\n\n      for (var i = 0; i < r * c * 4; ++i) {\n        buffer[i] = 0xff;\n      }\n    }\n\n    return v;\n  }\n});\n\nproto.begin = function () {\n  var gl = this.gl;\n  var shape = this.shape;\n\n  if (!gl) {\n    return;\n  }\n\n  this.fbo.bind();\n  gl.clearColor(1, 1, 1, 1);\n  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n};\n\nproto.end = function () {\n  var gl = this.gl;\n\n  if (!gl) {\n    return;\n  }\n\n  gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\n  if (!this._readTimeout) {\n    clearTimeout(this._readTimeout);\n  }\n\n  this._readTimeout = setTimeout(this._readCallback, 1);\n};\n\nproto.query = function (x, y, radius) {\n  if (!this.gl) {\n    return null;\n  }\n\n  var shape = this.fbo.shape.slice();\n  x = x | 0;\n  y = y | 0;\n\n  if (typeof radius !== 'number') {\n    radius = 1.0;\n  }\n\n  var x0 = Math.min(Math.max(x - radius, 0), shape[0]) | 0;\n  var x1 = Math.min(Math.max(x + radius, 0), shape[0]) | 0;\n  var y0 = Math.min(Math.max(y - radius, 0), shape[1]) | 0;\n  var y1 = Math.min(Math.max(y + radius, 0), shape[1]) | 0;\n\n  if (x1 <= x0 || y1 <= y0) {\n    return null;\n  }\n\n  var dims = [x1 - x0, y1 - y0];\n  var region = ndarray(this.buffer, [dims[0], dims[1], 4], [4, shape[0] * 4, 1], 4 * (x0 + shape[0] * y0));\n  var closest = selectRange(region.hi(dims[0], dims[1], 1), radius, radius);\n  var dx = closest[0];\n  var dy = closest[1];\n\n  if (dx < 0 || Math.pow(this.radius, 2) < closest[2]) {\n    return null;\n  }\n\n  var c0 = region.get(dx, dy, 0);\n  var c1 = region.get(dx, dy, 1);\n  var c2 = region.get(dx, dy, 2);\n  var c3 = region.get(dx, dy, 3);\n  return new SelectResult(dx + x0 | 0, dy + y0 | 0, c0, [c1, c2, c3], Math.sqrt(closest[2]));\n};\n\nproto.dispose = function () {\n  if (!this.gl) {\n    return;\n  }\n\n  this.fbo.dispose();\n  pool.free(this.buffer);\n  this.gl = null;\n\n  if (this._readTimeout) {\n    clearTimeout(this._readTimeout);\n  }\n};\n\nfunction createSelectBuffer(gl, shape) {\n  var fbo = createFBO(gl, shape);\n  var buffer = pool.mallocUint8(shape[0] * shape[1] * 4);\n  return new SelectBuffer(gl, fbo, buffer);\n}","map":null,"metadata":{},"sourceType":"script"}