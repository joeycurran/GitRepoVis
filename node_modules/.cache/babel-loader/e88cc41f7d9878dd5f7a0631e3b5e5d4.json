{"ast":null,"code":"'use strict';\n\nmodule.exports = createTable;\n\nvar chull = require('convex-hull');\n\nfunction constructVertex(d, a, b) {\n  var x = new Array(d);\n\n  for (var i = 0; i < d; ++i) {\n    x[i] = 0.0;\n\n    if (i === a) {\n      x[i] += 0.5;\n    }\n\n    if (i === b) {\n      x[i] += 0.5;\n    }\n  }\n\n  return x;\n}\n\nfunction constructCell(dimension, mask) {\n  if (mask === 0 || mask === (1 << dimension + 1) - 1) {\n    return [];\n  }\n\n  var points = [];\n  var index = [];\n\n  for (var i = 0; i <= dimension; ++i) {\n    if (mask & 1 << i) {\n      points.push(constructVertex(dimension, i - 1, i - 1));\n      index.push(null);\n\n      for (var j = 0; j <= dimension; ++j) {\n        if (~mask & 1 << j) {\n          points.push(constructVertex(dimension, i - 1, j - 1));\n          index.push([i, j]);\n        }\n      }\n    }\n  } //Preprocess points so first d+1 points are linearly independent\n\n\n  var hull = chull(points);\n  var faces = [];\n\n  i_loop: for (var i = 0; i < hull.length; ++i) {\n    var face = hull[i];\n    var nface = [];\n\n    for (var j = 0; j < face.length; ++j) {\n      if (!index[face[j]]) {\n        continue i_loop;\n      }\n\n      nface.push(index[face[j]].slice());\n    }\n\n    faces.push(nface);\n  }\n\n  return faces;\n}\n\nfunction createTable(dimension) {\n  var numCells = 1 << dimension + 1;\n  var result = new Array(numCells);\n\n  for (var i = 0; i < numCells; ++i) {\n    result[i] = constructCell(dimension, i);\n  }\n\n  return result;\n}","map":null,"metadata":{},"sourceType":"script"}