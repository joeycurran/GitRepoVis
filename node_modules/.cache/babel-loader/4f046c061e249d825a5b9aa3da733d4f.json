{"ast":null,"code":"'use strict';\n\nmodule.exports = monotoneConvexHull2D;\n\nvar orient = require('robust-orientation')[3];\n\nfunction monotoneConvexHull2D(points) {\n  var n = points.length;\n\n  if (n < 3) {\n    var result = new Array(n);\n\n    for (var i = 0; i < n; ++i) {\n      result[i] = i;\n    }\n\n    if (n === 2 && points[0][0] === points[1][0] && points[0][1] === points[1][1]) {\n      return [0];\n    }\n\n    return result;\n  } //Sort point indices along x-axis\n\n\n  var sorted = new Array(n);\n\n  for (var i = 0; i < n; ++i) {\n    sorted[i] = i;\n  }\n\n  sorted.sort(function (a, b) {\n    var d = points[a][0] - points[b][0];\n\n    if (d) {\n      return d;\n    }\n\n    return points[a][1] - points[b][1];\n  }); //Construct upper and lower hulls\n\n  var lower = [sorted[0], sorted[1]];\n  var upper = [sorted[0], sorted[1]];\n\n  for (var i = 2; i < n; ++i) {\n    var idx = sorted[i];\n    var p = points[idx]; //Insert into lower list\n\n    var m = lower.length;\n\n    while (m > 1 && orient(points[lower[m - 2]], points[lower[m - 1]], p) <= 0) {\n      m -= 1;\n      lower.pop();\n    }\n\n    lower.push(idx); //Insert into upper list\n\n    m = upper.length;\n\n    while (m > 1 && orient(points[upper[m - 2]], points[upper[m - 1]], p) >= 0) {\n      m -= 1;\n      upper.pop();\n    }\n\n    upper.push(idx);\n  } //Merge lists together\n\n\n  var result = new Array(upper.length + lower.length - 2);\n  var ptr = 0;\n\n  for (var i = 0, nl = lower.length; i < nl; ++i) {\n    result[ptr++] = lower[i];\n  }\n\n  for (var j = upper.length - 2; j > 0; --j) {\n    result[ptr++] = upper[j];\n  } //Return result\n\n\n  return result;\n}","map":null,"metadata":{},"sourceType":"script"}