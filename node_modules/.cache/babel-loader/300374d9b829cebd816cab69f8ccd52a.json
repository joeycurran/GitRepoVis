{"ast":null,"code":"'use strict';\n\nvar DIMENSION = 'd';\nvar AXIS = 'ax';\nvar VISIT = 'vv';\nvar FLIP = 'fp';\nvar ELEM_SIZE = 'es';\nvar RED_START = 'rs';\nvar RED_END = 're';\nvar RED_BOXES = 'rb';\nvar RED_INDEX = 'ri';\nvar RED_PTR = 'rp';\nvar BLUE_START = 'bs';\nvar BLUE_END = 'be';\nvar BLUE_BOXES = 'bb';\nvar BLUE_INDEX = 'bi';\nvar BLUE_PTR = 'bp';\nvar RETVAL = 'rv';\nvar INNER_LABEL = 'Q';\nvar ARGS = [DIMENSION, AXIS, VISIT, RED_START, RED_END, RED_BOXES, RED_INDEX, BLUE_START, BLUE_END, BLUE_BOXES, BLUE_INDEX];\n\nfunction generateBruteForce(redMajor, flip, full) {\n  var funcName = 'bruteForce' + (redMajor ? 'Red' : 'Blue') + (flip ? 'Flip' : '') + (full ? 'Full' : '');\n  var code = ['function ', funcName, '(', ARGS.join(), '){', 'var ', ELEM_SIZE, '=2*', DIMENSION, ';'];\n  var redLoop = 'for(var i=' + RED_START + ',' + RED_PTR + '=' + ELEM_SIZE + '*' + RED_START + ';' + 'i<' + RED_END + ';' + '++i,' + RED_PTR + '+=' + ELEM_SIZE + '){' + 'var x0=' + RED_BOXES + '[' + AXIS + '+' + RED_PTR + '],' + 'x1=' + RED_BOXES + '[' + AXIS + '+' + RED_PTR + '+' + DIMENSION + '],' + 'xi=' + RED_INDEX + '[i];';\n  var blueLoop = 'for(var j=' + BLUE_START + ',' + BLUE_PTR + '=' + ELEM_SIZE + '*' + BLUE_START + ';' + 'j<' + BLUE_END + ';' + '++j,' + BLUE_PTR + '+=' + ELEM_SIZE + '){' + 'var y0=' + BLUE_BOXES + '[' + AXIS + '+' + BLUE_PTR + '],' + (full ? 'y1=' + BLUE_BOXES + '[' + AXIS + '+' + BLUE_PTR + '+' + DIMENSION + '],' : '') + 'yi=' + BLUE_INDEX + '[j];';\n\n  if (redMajor) {\n    code.push(redLoop, INNER_LABEL, ':', blueLoop);\n  } else {\n    code.push(blueLoop, INNER_LABEL, ':', redLoop);\n  }\n\n  if (full) {\n    code.push('if(y1<x0||x1<y0)continue;');\n  } else if (flip) {\n    code.push('if(y0<=x0||x1<y0)continue;');\n  } else {\n    code.push('if(y0<x0||x1<y0)continue;');\n  }\n\n  code.push('for(var k=' + AXIS + '+1;k<' + DIMENSION + ';++k){' + 'var r0=' + RED_BOXES + '[k+' + RED_PTR + '],' + 'r1=' + RED_BOXES + '[k+' + DIMENSION + '+' + RED_PTR + '],' + 'b0=' + BLUE_BOXES + '[k+' + BLUE_PTR + '],' + 'b1=' + BLUE_BOXES + '[k+' + DIMENSION + '+' + BLUE_PTR + '];' + 'if(r1<b0||b1<r0)continue ' + INNER_LABEL + ';}' + 'var ' + RETVAL + '=' + VISIT + '(');\n\n  if (flip) {\n    code.push('yi,xi');\n  } else {\n    code.push('xi,yi');\n  }\n\n  code.push(');if(' + RETVAL + '!==void 0)return ' + RETVAL + ';}}}');\n  return {\n    name: funcName,\n    code: code.join('')\n  };\n}\n\nfunction bruteForcePlanner(full) {\n  var funcName = 'bruteForce' + (full ? 'Full' : 'Partial');\n  var prefix = [];\n  var fargs = ARGS.slice();\n\n  if (!full) {\n    fargs.splice(3, 0, FLIP);\n  }\n\n  var code = ['function ' + funcName + '(' + fargs.join() + '){'];\n\n  function invoke(redMajor, flip) {\n    var res = generateBruteForce(redMajor, flip, full);\n    prefix.push(res.code);\n    code.push('return ' + res.name + '(' + ARGS.join() + ');');\n  }\n\n  code.push('if(' + RED_END + '-' + RED_START + '>' + BLUE_END + '-' + BLUE_START + '){');\n\n  if (full) {\n    invoke(true, false);\n    code.push('}else{');\n    invoke(false, false);\n  } else {\n    code.push('if(' + FLIP + '){');\n    invoke(true, true);\n    code.push('}else{');\n    invoke(true, false);\n    code.push('}}else{if(' + FLIP + '){');\n    invoke(false, true);\n    code.push('}else{');\n    invoke(false, false);\n    code.push('}');\n  }\n\n  code.push('}}return ' + funcName);\n  var codeStr = prefix.join('') + code.join('');\n  var proc = new Function(codeStr);\n  return proc();\n}\n\nexports.partial = bruteForcePlanner(false);\nexports.full = bruteForcePlanner(true);","map":null,"metadata":{},"sourceType":"script"}