{"ast":null,"code":"\"use strict\";\n\nvar vectorizeText = require(\"vectorize-text\");\n\nmodule.exports = getGlyph;\nvar GLYPH_CACHE = {};\n\nfunction getGlyph(symbol, font, pixelRatio) {\n  var fontCache = GLYPH_CACHE[font];\n\n  if (!fontCache) {\n    fontCache = GLYPH_CACHE[font] = {};\n  }\n\n  if (symbol in fontCache) {\n    return fontCache[symbol];\n  }\n\n  var config = {\n    textAlign: \"center\",\n    textBaseline: \"middle\",\n    lineHeight: 1.0,\n    font: font,\n    lineSpacing: 1.25,\n    styletags: {\n      breaklines: true,\n      bolds: true,\n      italics: true,\n      subscripts: true,\n      superscripts: true\n    }\n  }; //Get line and triangle meshes for glyph\n\n  config.triangles = true;\n  var triSymbol = vectorizeText(symbol, config);\n  config.triangles = false;\n  var lineSymbol = vectorizeText(symbol, config);\n  var i, j;\n\n  if (pixelRatio && pixelRatio !== 1) {\n    for (i = 0; i < triSymbol.positions.length; ++i) {\n      for (j = 0; j < triSymbol.positions[i].length; ++j) {\n        triSymbol.positions[i][j] /= pixelRatio;\n      }\n    }\n\n    for (i = 0; i < lineSymbol.positions.length; ++i) {\n      for (j = 0; j < lineSymbol.positions[i].length; ++j) {\n        lineSymbol.positions[i][j] /= pixelRatio;\n      }\n    }\n  } //Calculate bounding box\n\n\n  var bounds = [[Infinity, Infinity], [-Infinity, -Infinity]];\n  var n = lineSymbol.positions.length;\n\n  for (i = 0; i < n; ++i) {\n    var p = lineSymbol.positions[i];\n\n    for (j = 0; j < 2; ++j) {\n      bounds[0][j] = Math.min(bounds[0][j], p[j]);\n      bounds[1][j] = Math.max(bounds[1][j], p[j]);\n    }\n  } //Save cached symbol\n\n\n  return fontCache[symbol] = [triSymbol, lineSymbol, bounds];\n}","map":null,"metadata":{},"sourceType":"script"}