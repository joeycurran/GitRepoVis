{"ast":null,"code":"'use strict';\n\nvar coallesceUniforms = require('./reflect');\n\nvar GLError = require(\"./GLError\");\n\nmodule.exports = createUniformWrapper; //Binds a function and returns a value\n\nfunction identity(x) {\n  var c = new Function('y', 'return function(){return y}');\n  return c(x);\n}\n\nfunction makeVector(length, fill) {\n  var result = new Array(length);\n\n  for (var i = 0; i < length; ++i) {\n    result[i] = fill;\n  }\n\n  return result;\n} //Create shims for uniforms\n\n\nfunction createUniformWrapper(gl, wrapper, uniforms, locations) {\n  function makeGetter(index) {\n    var proc = new Function('gl', 'wrapper', 'locations', 'return function(){return gl.getUniform(wrapper.program,locations[' + index + '])}');\n    return proc(gl, wrapper, locations);\n  }\n\n  function makePropSetter(path, index, type) {\n    switch (type) {\n      case 'bool':\n      case 'int':\n      case 'sampler2D':\n      case 'samplerCube':\n        return 'gl.uniform1i(locations[' + index + '],obj' + path + ')';\n\n      case 'float':\n        return 'gl.uniform1f(locations[' + index + '],obj' + path + ')';\n\n      default:\n        var vidx = type.indexOf('vec');\n\n        if (0 <= vidx && vidx <= 1 && type.length === 4 + vidx) {\n          var d = type.charCodeAt(type.length - 1) - 48;\n\n          if (d < 2 || d > 4) {\n            throw new GLError('', 'Invalid data type');\n          }\n\n          switch (type.charAt(0)) {\n            case 'b':\n            case 'i':\n              return 'gl.uniform' + d + 'iv(locations[' + index + '],obj' + path + ')';\n\n            case 'v':\n              return 'gl.uniform' + d + 'fv(locations[' + index + '],obj' + path + ')';\n\n            default:\n              throw new GLError('', 'Unrecognized data type for vector ' + name + ': ' + type);\n          }\n        } else if (type.indexOf('mat') === 0 && type.length === 4) {\n          var d = type.charCodeAt(type.length - 1) - 48;\n\n          if (d < 2 || d > 4) {\n            throw new GLError('', 'Invalid uniform dimension type for matrix ' + name + ': ' + type);\n          }\n\n          return 'gl.uniformMatrix' + d + 'fv(locations[' + index + '],false,obj' + path + ')';\n        } else {\n          throw new GLError('', 'Unknown uniform data type for ' + name + ': ' + type);\n        }\n\n        break;\n    }\n  }\n\n  function enumerateIndices(prefix, type) {\n    if (typeof type !== 'object') {\n      return [[prefix, type]];\n    }\n\n    var indices = [];\n\n    for (var id in type) {\n      var prop = type[id];\n      var tprefix = prefix;\n\n      if (parseInt(id) + '' === id) {\n        tprefix += '[' + id + ']';\n      } else {\n        tprefix += '.' + id;\n      }\n\n      if (typeof prop === 'object') {\n        indices.push.apply(indices, enumerateIndices(tprefix, prop));\n      } else {\n        indices.push([tprefix, prop]);\n      }\n    }\n\n    return indices;\n  }\n\n  function makeSetter(type) {\n    var code = ['return function updateProperty(obj){'];\n    var indices = enumerateIndices('', type);\n\n    for (var i = 0; i < indices.length; ++i) {\n      var item = indices[i];\n      var path = item[0];\n      var idx = item[1];\n\n      if (locations[idx]) {\n        code.push(makePropSetter(path, idx, uniforms[idx].type));\n      }\n    }\n\n    code.push('return obj}');\n    var proc = new Function('gl', 'locations', code.join('\\n'));\n    return proc(gl, locations);\n  }\n\n  function defaultValue(type) {\n    switch (type) {\n      case 'bool':\n        return false;\n\n      case 'int':\n      case 'sampler2D':\n      case 'samplerCube':\n        return 0;\n\n      case 'float':\n        return 0.0;\n\n      default:\n        var vidx = type.indexOf('vec');\n\n        if (0 <= vidx && vidx <= 1 && type.length === 4 + vidx) {\n          var d = type.charCodeAt(type.length - 1) - 48;\n\n          if (d < 2 || d > 4) {\n            throw new GLError('', 'Invalid data type');\n          }\n\n          if (type.charAt(0) === 'b') {\n            return makeVector(d, false);\n          }\n\n          return makeVector(d, 0);\n        } else if (type.indexOf('mat') === 0 && type.length === 4) {\n          var d = type.charCodeAt(type.length - 1) - 48;\n\n          if (d < 2 || d > 4) {\n            throw new GLError('', 'Invalid uniform dimension type for matrix ' + name + ': ' + type);\n          }\n\n          return makeVector(d * d, 0);\n        } else {\n          throw new GLError('', 'Unknown uniform data type for ' + name + ': ' + type);\n        }\n\n        break;\n    }\n  }\n\n  function storeProperty(obj, prop, type) {\n    if (typeof type === 'object') {\n      var child = processObject(type);\n      Object.defineProperty(obj, prop, {\n        get: identity(child),\n        set: makeSetter(type),\n        enumerable: true,\n        configurable: false\n      });\n    } else {\n      if (locations[type]) {\n        Object.defineProperty(obj, prop, {\n          get: makeGetter(type),\n          set: makeSetter(type),\n          enumerable: true,\n          configurable: false\n        });\n      } else {\n        obj[prop] = defaultValue(uniforms[type].type);\n      }\n    }\n  }\n\n  function processObject(obj) {\n    var result;\n\n    if (Array.isArray(obj)) {\n      result = new Array(obj.length);\n\n      for (var i = 0; i < obj.length; ++i) {\n        storeProperty(result, i, obj[i]);\n      }\n    } else {\n      result = {};\n\n      for (var id in obj) {\n        storeProperty(result, id, obj[id]);\n      }\n    }\n\n    return result;\n  } //Return data\n\n\n  var coallesced = coallesceUniforms(uniforms, true);\n  return {\n    get: identity(processObject(coallesced)),\n    set: makeSetter(coallesced),\n    enumerable: true,\n    configurable: true\n  };\n}","map":null,"metadata":{},"sourceType":"script"}