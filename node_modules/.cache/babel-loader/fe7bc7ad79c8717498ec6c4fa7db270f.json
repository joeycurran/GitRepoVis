{"ast":null,"code":"/*\nInput:  translation ; a 3 component vector\n        scale       ; a 3 component vector\n        skew        ; skew factors XY,XZ,YZ represented as a 3 component vector\n        perspective ; a 4 component vector\n        quaternion  ; a 4 component vector\nOutput: matrix      ; a 4x4 matrix\n\nFrom: http://www.w3.org/TR/css3-transforms/#recomposing-to-a-3d-matrix\n*/\nvar mat4 = {\n  identity: require('gl-mat4/identity'),\n  translate: require('gl-mat4/translate'),\n  multiply: require('gl-mat4/multiply'),\n  create: require('gl-mat4/create'),\n  scale: require('gl-mat4/scale'),\n  fromRotationTranslation: require('gl-mat4/fromRotationTranslation')\n};\nvar rotationMatrix = mat4.create();\nvar temp = mat4.create();\n\nmodule.exports = function recomposeMat4(matrix, translation, scale, skew, perspective, quaternion) {\n  mat4.identity(matrix); //apply translation & rotation\n\n  mat4.fromRotationTranslation(matrix, quaternion, translation); //apply perspective\n\n  matrix[3] = perspective[0];\n  matrix[7] = perspective[1];\n  matrix[11] = perspective[2];\n  matrix[15] = perspective[3]; // apply skew\n  // temp is a identity 4x4 matrix initially\n\n  mat4.identity(temp);\n\n  if (skew[2] !== 0) {\n    temp[9] = skew[2];\n    mat4.multiply(matrix, matrix, temp);\n  }\n\n  if (skew[1] !== 0) {\n    temp[9] = 0;\n    temp[8] = skew[1];\n    mat4.multiply(matrix, matrix, temp);\n  }\n\n  if (skew[0] !== 0) {\n    temp[8] = 0;\n    temp[4] = skew[0];\n    mat4.multiply(matrix, matrix, temp);\n  } //apply scale\n\n\n  mat4.scale(matrix, matrix, scale);\n  return matrix;\n};","map":null,"metadata":{},"sourceType":"script"}