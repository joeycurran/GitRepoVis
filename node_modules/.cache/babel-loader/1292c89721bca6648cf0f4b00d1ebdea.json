{"ast":null,"code":"'use strict';\n\nvar interp = require('ndarray-linear-interpolate');\n\nvar cwise = require('cwise');\n\nvar do_warp = cwise({\n  args: ['index', 'array', 'scalar', 'scalar', 'scalar'],\n  pre: function (idx, dest, func, interp, n) {\n    this.warped = new Array(n);\n  },\n  body: function warpND(idx, dest, func, interp, n) {\n    func(this.warped, idx);\n    dest = interp.apply(undefined, this.warped);\n  }\n});\nvar do_warp_1 = cwise({\n  args: ['index', 'array', 'scalar', 'scalar', 'scalar'],\n  pre: function () {\n    this.warped = [0];\n  },\n  body: function warp1D(idx, dest, func, interp, src) {\n    func(this.warped, idx);\n    dest = interp(src, this.warped[0]);\n  }\n});\nvar do_warp_2 = cwise({\n  args: ['index', 'array', 'scalar', 'scalar', 'scalar'],\n  pre: function () {\n    this.warped = [0, 0];\n  },\n  body: function warp2D(idx, dest, func, interp, src) {\n    func(this.warped, idx);\n    dest = interp(src, this.warped[0], this.warped[1]);\n  }\n});\nvar do_warp_3 = cwise({\n  args: ['index', 'array', 'scalar', 'scalar', 'scalar'],\n  pre: function () {\n    this.warped = [0, 0, 0];\n  },\n  body: function warp3D(idx, dest, func, interp, src) {\n    func(this.warped, idx);\n    dest = interp(src, this.warped[0], this.warped[1], this.warped[2]);\n  }\n});\n\nmodule.exports = function warp(dest, src, func) {\n  switch (src.shape.length) {\n    case 1:\n      do_warp_1(dest, func, interp.d1, src);\n      break;\n\n    case 2:\n      do_warp_2(dest, func, interp.d2, src);\n      break;\n\n    case 3:\n      do_warp_3(dest, func, interp.d3, src);\n      break;\n\n    default:\n      do_warp(dest, func, interp.bind(undefined, src), src.shape.length);\n      break;\n  }\n\n  return dest;\n};","map":null,"metadata":{},"sourceType":"script"}