{"ast":null,"code":"'use strict';\n\nmodule.exports = getPolygonizer;\n\nvar pool = require('typedarray-pool');\n\nvar createMSTable = require('marching-simplex-table');\n\nvar CACHE = {};\n\nfunction createCellPolygonizer(d) {\n  var maxCellSize = 0;\n  var tables = new Array(d + 1);\n  tables[0] = [[]];\n\n  for (var i = 1; i <= d; ++i) {\n    var tab = tables[i] = createMSTable(i);\n\n    for (var j = 0; j < tab.length; ++j) {\n      maxCellSize = Math.max(maxCellSize, tab[i].length);\n    }\n  }\n\n  var code = ['function B(C,E,i,j){', 'var a=Math.min(i,j)|0,b=Math.max(i,j)|0,l=C[2*a],h=C[2*a+1];', 'while(l<h){', 'var m=(l+h)>>1,v=E[2*m+1];', 'if(v===b){return m}', 'if(b<v){h=m}else{l=m+1}', '}', 'return l;', '};', 'function getContour', d, 'd(F,E,C,S){', 'var n=F.length,R=[];', 'for(var i=0;i<n;++i){var c=F[i],l=c.length;'];\n\n  function generateCase(facets) {\n    if (facets.length <= 0) {\n      return;\n    }\n\n    code.push('R.push(');\n\n    for (var i = 0; i < facets.length; ++i) {\n      var facet = facets[i];\n\n      if (i > 0) {\n        code.push(',');\n      }\n\n      code.push('[');\n\n      for (var j = 0; j < facet.length; ++j) {\n        var f = facet[j];\n\n        if (j > 0) {\n          code.push(',');\n        }\n\n        code.push('B(C,E,c[', f[0], '],c[', f[1], '])');\n      }\n\n      code.push(']');\n    }\n\n    code.push(');');\n  }\n\n  for (var i = d + 1; i > 1; --i) {\n    if (i < d + 1) {\n      code.push('else ');\n    }\n\n    code.push('if(l===', i, '){'); //Generate mask\n\n    var maskStr = [];\n\n    for (var j = 0; j < i; ++j) {\n      maskStr.push('(S[c[' + j + ']]<<' + j + ')');\n    } //Perform table look up\n\n\n    code.push('var M=', maskStr.join('+'), ';if(M===0||M===', (1 << i) - 1, '){continue}switch(M){');\n    var tab = tables[i - 1];\n\n    for (var j = 0; j < tab.length; ++j) {\n      code.push('case ', j, ':');\n      generateCase(tab[j]);\n      code.push('break;');\n    }\n\n    code.push('}}');\n  }\n\n  code.push('}return R;};return getContour', d, 'd');\n  var proc = new Function('pool', code.join(''));\n  return proc(pool);\n}\n\nfunction getPolygonizer(d) {\n  var alg = CACHE[d];\n\n  if (!alg) {\n    alg = CACHE[d] = createCellPolygonizer(d);\n  }\n\n  return alg;\n}","map":null,"metadata":{},"sourceType":"script"}