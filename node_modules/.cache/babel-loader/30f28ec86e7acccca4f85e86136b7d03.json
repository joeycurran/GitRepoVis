{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n'use strict';\n\nvar Lib = require('../../lib');\n\nvar Registry = require('../../registry');\n\nvar Color = require('../../components/color');\n\nvar handleGroupingDefaults = require('../bar/defaults').handleGroupingDefaults;\n\nvar attributes = require('./attributes');\n\nfunction supplyDefaults(traceIn, traceOut, defaultColor, layout) {\n  function coerce(attr, dflt) {\n    return Lib.coerce(traceIn, traceOut, attributes, attr, dflt);\n  }\n\n  handleSampleDefaults(traceIn, traceOut, coerce, layout);\n  if (traceOut.visible === false) return;\n  coerce('line.color', (traceIn.marker || {}).color || defaultColor);\n  coerce('line.width');\n  coerce('fillcolor', Color.addOpacity(traceOut.line.color, 0.5));\n  coerce('whiskerwidth');\n  coerce('boxmean');\n  coerce('width');\n  var notched = coerce('notched', traceIn.notchwidth !== undefined);\n  if (notched) coerce('notchwidth');\n  handlePointsDefaults(traceIn, traceOut, coerce, {\n    prefix: 'box'\n  });\n}\n\nfunction handleSampleDefaults(traceIn, traceOut, coerce, layout) {\n  var y = coerce('y');\n  var x = coerce('x');\n  var hasX = x && x.length;\n  var defaultOrientation, len;\n\n  if (y && y.length) {\n    defaultOrientation = 'v';\n\n    if (hasX) {\n      len = Math.min(Lib.minRowLength(x), Lib.minRowLength(y));\n    } else {\n      coerce('x0');\n      len = Lib.minRowLength(y);\n    }\n  } else if (hasX) {\n    defaultOrientation = 'h';\n    coerce('y0');\n    len = Lib.minRowLength(x);\n  } else {\n    traceOut.visible = false;\n    return;\n  }\n\n  traceOut._length = len;\n  var handleCalendarDefaults = Registry.getComponentMethod('calendars', 'handleTraceDefaults');\n  handleCalendarDefaults(traceIn, traceOut, ['x', 'y'], layout);\n  coerce('orientation', defaultOrientation);\n}\n\nfunction handlePointsDefaults(traceIn, traceOut, coerce, opts) {\n  var prefix = opts.prefix;\n  var outlierColorDflt = Lib.coerce2(traceIn, traceOut, attributes, 'marker.outliercolor');\n  var lineoutliercolor = coerce('marker.line.outliercolor');\n  var points = coerce(prefix + 'points', outlierColorDflt || lineoutliercolor ? 'suspectedoutliers' : undefined);\n\n  if (points) {\n    coerce('jitter', points === 'all' ? 0.3 : 0);\n    coerce('pointpos', points === 'all' ? -1.5 : 0);\n    coerce('marker.symbol');\n    coerce('marker.opacity');\n    coerce('marker.size');\n    coerce('marker.color', traceOut.line.color);\n    coerce('marker.line.color');\n    coerce('marker.line.width');\n\n    if (points === 'suspectedoutliers') {\n      coerce('marker.line.outliercolor', traceOut.marker.color);\n      coerce('marker.line.outlierwidth');\n    }\n\n    coerce('selected.marker.color');\n    coerce('unselected.marker.color');\n    coerce('selected.marker.size');\n    coerce('unselected.marker.size');\n    coerce('text');\n    coerce('hovertext');\n  } else {\n    delete traceOut.marker;\n  }\n\n  var hoveron = coerce('hoveron');\n\n  if (hoveron === 'all' || hoveron.indexOf('points') !== -1) {\n    coerce('hovertemplate');\n  }\n\n  Lib.coerceSelectionMarkerOpacity(traceOut, coerce);\n}\n\nfunction crossTraceDefaults(fullData, fullLayout) {\n  var traceIn, traceOut;\n\n  function coerce(attr) {\n    return Lib.coerce(traceOut._input, traceOut, attributes, attr);\n  }\n\n  for (var i = 0; i < fullData.length; i++) {\n    traceOut = fullData[i];\n    var traceType = traceOut.type;\n\n    if (traceType === 'box' || traceType === 'violin') {\n      traceIn = traceOut._input;\n\n      if (fullLayout[traceType + 'mode'] === 'group') {\n        handleGroupingDefaults(traceIn, traceOut, fullLayout, coerce);\n      }\n    }\n  }\n}\n\nmodule.exports = {\n  supplyDefaults: supplyDefaults,\n  crossTraceDefaults: crossTraceDefaults,\n  handleSampleDefaults: handleSampleDefaults,\n  handlePointsDefaults: handlePointsDefaults\n};","map":null,"metadata":{},"sourceType":"script"}