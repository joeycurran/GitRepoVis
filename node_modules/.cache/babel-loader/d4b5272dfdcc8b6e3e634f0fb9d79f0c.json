{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n'use strict';\n\nvar showNoWebGlMsg = require('./show_no_webgl_msg'); // Note that this module should be ONLY required into\n// files corresponding to regl trace modules\n// so that bundles with non-regl only don't include\n// regl and all its bytes.\n\n\nvar createRegl = require('regl');\n/**\n * Idempotent version of createRegl. Create regl instances\n * in the correct canvases with the correct attributes and\n * options\n *\n * @param {DOM node or object} gd : graph div object\n * @param {array} extensions : list of extension to pass to createRegl\n *\n * @return {boolean} true if all createRegl calls succeeded, false otherwise\n */\n\n\nmodule.exports = function prepareRegl(gd, extensions) {\n  var fullLayout = gd._fullLayout;\n  var success = true;\n\n  fullLayout._glcanvas.each(function (d) {\n    if (d.regl) return; // only parcoords needs pick layer\n\n    if (d.pick && !fullLayout._has('parcoords')) return;\n\n    try {\n      d.regl = createRegl({\n        canvas: this,\n        attributes: {\n          antialias: !d.pick,\n          preserveDrawingBuffer: true\n        },\n        pixelRatio: gd._context.plotGlPixelRatio || global.devicePixelRatio,\n        extensions: extensions || []\n      });\n    } catch (e) {\n      success = false;\n    }\n\n    if (success) {\n      this.addEventListener('webglcontextlost', function (event) {\n        if (gd && gd.emit) {\n          gd.emit('plotly_webglcontextlost', {\n            event: event,\n            layer: d.key\n          });\n        }\n      }, false);\n    }\n  });\n\n  if (!success) {\n    showNoWebGlMsg({\n      container: fullLayout._glcontainer.node()\n    });\n  }\n\n  return success;\n};","map":null,"metadata":{},"sourceType":"script"}