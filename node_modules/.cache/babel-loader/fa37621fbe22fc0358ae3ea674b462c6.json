{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n'use strict';\n\nvar Registry = require('../../registry');\n\nvar Lib = require('../../lib');\n\nvar colorscaleDefaults = require('../../components/colorscale/defaults');\n\nvar attributes = require('./attributes');\n\nmodule.exports = function supplyDefaults(traceIn, traceOut, defaultColor, layout) {\n  var i, j;\n\n  function coerce(attr, dflt) {\n    return Lib.coerce(traceIn, traceOut, attributes, attr, dflt);\n  }\n\n  var x = coerce('x');\n  var y = coerce('y');\n  var z = coerce('z');\n\n  if (!z || !z.length || (x ? x.length < 1 : false) || (y ? y.length < 1 : false)) {\n    traceOut.visible = false;\n    return;\n  }\n\n  traceOut._xlength = Array.isArray(x) && Lib.isArrayOrTypedArray(x[0]) ? z.length : z[0].length;\n  traceOut._ylength = z.length;\n  var handleCalendarDefaults = Registry.getComponentMethod('calendars', 'handleTraceDefaults');\n  handleCalendarDefaults(traceIn, traceOut, ['x', 'y', 'z'], layout);\n  coerce('text');\n  coerce('hovertext');\n  coerce('hovertemplate'); // Coerce remaining properties\n\n  ['lighting.ambient', 'lighting.diffuse', 'lighting.specular', 'lighting.roughness', 'lighting.fresnel', 'lightposition.x', 'lightposition.y', 'lightposition.z', 'hidesurface', 'connectgaps', 'opacity'].forEach(function (x) {\n    coerce(x);\n  });\n  var surfaceColor = coerce('surfacecolor');\n  var dims = ['x', 'y', 'z'];\n\n  for (i = 0; i < 3; ++i) {\n    var contourDim = 'contours.' + dims[i];\n    var show = coerce(contourDim + '.show');\n    var highlight = coerce(contourDim + '.highlight');\n\n    if (show || highlight) {\n      for (j = 0; j < 3; ++j) {\n        coerce(contourDim + '.project.' + dims[j]);\n      }\n    }\n\n    if (show) {\n      coerce(contourDim + '.color');\n      coerce(contourDim + '.width');\n      coerce(contourDim + '.usecolormap');\n    }\n\n    if (highlight) {\n      coerce(contourDim + '.highlightcolor');\n      coerce(contourDim + '.highlightwidth');\n    }\n\n    coerce(contourDim + '.start');\n    coerce(contourDim + '.end');\n    coerce(contourDim + '.size');\n  } // backward compatibility block\n\n\n  if (!surfaceColor) {\n    mapLegacy(traceIn, 'zmin', 'cmin');\n    mapLegacy(traceIn, 'zmax', 'cmax');\n    mapLegacy(traceIn, 'zauto', 'cauto');\n  } // TODO if contours.?.usecolormap are false and hidesurface is true\n  // the colorbar shouldn't be shown by default\n\n\n  colorscaleDefaults(traceIn, traceOut, layout, coerce, {\n    prefix: '',\n    cLetter: 'c'\n  }); // disable 1D transforms - currently surface does NOT support column data like heatmap does\n  // you can use mesh3d for this use case, but not surface\n\n  traceOut._length = null;\n};\n\nfunction mapLegacy(traceIn, oldAttr, newAttr) {\n  if (oldAttr in traceIn && !(newAttr in traceIn)) {\n    traceIn[newAttr] = traceIn[oldAttr];\n  }\n}","map":null,"metadata":{},"sourceType":"script"}