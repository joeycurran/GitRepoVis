{"ast":null,"code":"'use strict';\n\nvar createBuffer = require('gl-buffer');\n\nvar createVAO = require('gl-vao');\n\nvar createShader = require('./shaders/index');\n\nmodule.exports = createSpikes;\nvar identity = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n\nfunction AxisSpikes(gl, buffer, vao, shader) {\n  this.gl = gl;\n  this.buffer = buffer;\n  this.vao = vao;\n  this.shader = shader;\n  this.pixelRatio = 1;\n  this.bounds = [[-1000, -1000, -1000], [1000, 1000, 1000]];\n  this.position = [0, 0, 0];\n  this.lineWidth = [2, 2, 2];\n  this.colors = [[0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1]];\n  this.enabled = [true, true, true];\n  this.drawSides = [true, true, true];\n  this.axes = null;\n}\n\nvar proto = AxisSpikes.prototype;\nvar OUTER_FACE = [0, 0, 0];\nvar INNER_FACE = [0, 0, 0];\nvar SHAPE = [0, 0];\n\nproto.isTransparent = function () {\n  return false;\n};\n\nproto.drawTransparent = function (camera) {};\n\nproto.draw = function (camera) {\n  var gl = this.gl;\n  var vao = this.vao;\n  var shader = this.shader;\n  vao.bind();\n  shader.bind();\n  var model = camera.model || identity;\n  var view = camera.view || identity;\n  var projection = camera.projection || identity;\n  var axis;\n\n  if (this.axes) {\n    axis = this.axes.lastCubeProps.axis;\n  }\n\n  var outerFace = OUTER_FACE;\n  var innerFace = INNER_FACE;\n\n  for (var i = 0; i < 3; ++i) {\n    if (axis && axis[i] < 0) {\n      outerFace[i] = this.bounds[0][i];\n      innerFace[i] = this.bounds[1][i];\n    } else {\n      outerFace[i] = this.bounds[1][i];\n      innerFace[i] = this.bounds[0][i];\n    }\n  }\n\n  SHAPE[0] = gl.drawingBufferWidth;\n  SHAPE[1] = gl.drawingBufferHeight;\n  shader.uniforms.model = model;\n  shader.uniforms.view = view;\n  shader.uniforms.projection = projection;\n  shader.uniforms.coordinates = [this.position, outerFace, innerFace];\n  shader.uniforms.colors = this.colors;\n  shader.uniforms.screenShape = SHAPE;\n\n  for (var i = 0; i < 3; ++i) {\n    shader.uniforms.lineWidth = this.lineWidth[i] * this.pixelRatio;\n\n    if (this.enabled[i]) {\n      vao.draw(gl.TRIANGLES, 6, 6 * i);\n\n      if (this.drawSides[i]) {\n        vao.draw(gl.TRIANGLES, 12, 18 + 12 * i);\n      }\n    }\n  }\n\n  vao.unbind();\n};\n\nproto.update = function (options) {\n  if (!options) {\n    return;\n  }\n\n  if (\"bounds\" in options) {\n    this.bounds = options.bounds;\n  }\n\n  if (\"position\" in options) {\n    this.position = options.position;\n  }\n\n  if (\"lineWidth\" in options) {\n    this.lineWidth = options.lineWidth;\n  }\n\n  if (\"colors\" in options) {\n    this.colors = options.colors;\n  }\n\n  if (\"enabled\" in options) {\n    this.enabled = options.enabled;\n  }\n\n  if (\"drawSides\" in options) {\n    this.drawSides = options.drawSides;\n  }\n};\n\nproto.dispose = function () {\n  this.vao.dispose();\n  this.buffer.dispose();\n  this.shader.dispose();\n};\n\nfunction createSpikes(gl, options) {\n  //Create buffers\n  var data = [];\n\n  function line(x, y, z, i, l, h) {\n    var row = [x, y, z, 0, 0, 0, 1];\n    row[i + 3] = 1;\n    row[i] = l;\n    data.push.apply(data, row);\n    row[6] = -1;\n    data.push.apply(data, row);\n    row[i] = h;\n    data.push.apply(data, row);\n    data.push.apply(data, row);\n    row[6] = 1;\n    data.push.apply(data, row);\n    row[i] = l;\n    data.push.apply(data, row);\n  }\n\n  line(0, 0, 0, 0, 0, 1);\n  line(0, 0, 0, 1, 0, 1);\n  line(0, 0, 0, 2, 0, 1);\n  line(1, 0, 0, 1, -1, 1);\n  line(1, 0, 0, 2, -1, 1);\n  line(0, 1, 0, 0, -1, 1);\n  line(0, 1, 0, 2, -1, 1);\n  line(0, 0, 1, 0, -1, 1);\n  line(0, 0, 1, 1, -1, 1);\n  var buffer = createBuffer(gl, data);\n  var vao = createVAO(gl, [{\n    type: gl.FLOAT,\n    buffer: buffer,\n    size: 3,\n    offset: 0,\n    stride: 28\n  }, {\n    type: gl.FLOAT,\n    buffer: buffer,\n    size: 3,\n    offset: 12,\n    stride: 28\n  }, {\n    type: gl.FLOAT,\n    buffer: buffer,\n    size: 1,\n    offset: 24,\n    stride: 28\n  }]); //Create shader\n\n  var shader = createShader(gl);\n  shader.attributes.position.location = 0;\n  shader.attributes.color.location = 1;\n  shader.attributes.weight.location = 2; //Create spike object\n\n  var spikes = new AxisSpikes(gl, buffer, vao, shader); //Set parameters\n\n  spikes.update(options); //Return resulting object\n\n  return spikes;\n}","map":null,"metadata":{},"sourceType":"script"}