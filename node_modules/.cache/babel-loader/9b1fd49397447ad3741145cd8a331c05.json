{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n'use strict';\n\nvar scatterHover = require('../scatter/hover');\n\nvar Axes = require('../../plots/cartesian/axes');\n\nmodule.exports = function hoverPoints(pointData, xval, yval, hovermode) {\n  var scatterPointData = scatterHover(pointData, xval, yval, hovermode);\n  if (!scatterPointData || scatterPointData[0].index === false) return;\n  var newPointData = scatterPointData[0]; // if hovering on a fill, we don't show any point data so the label is\n  // unchanged from what scatter gives us - except that it needs to\n  // be constrained to the trianglular plot area, not just the rectangular\n  // area defined by the synthetic x and y axes\n  // TODO: in some cases the vertical middle of the shape is not within\n  // the triangular viewport at all, so the label can become disconnected\n  // from the shape entirely. But calculating what portion of the shape\n  // is actually visible, as constrained by the diagonal axis lines, is not\n  // so easy and anyway we lost the information we would have needed to do\n  // this inside scatterHover.\n\n  if (newPointData.index === undefined) {\n    var yFracUp = 1 - newPointData.y0 / pointData.ya._length;\n    var xLen = pointData.xa._length;\n    var xMin = xLen * yFracUp / 2;\n    var xMax = xLen - xMin;\n    newPointData.x0 = Math.max(Math.min(newPointData.x0, xMax), xMin);\n    newPointData.x1 = Math.max(Math.min(newPointData.x1, xMax), xMin);\n    return scatterPointData;\n  }\n\n  var cdi = newPointData.cd[newPointData.index];\n  newPointData.a = cdi.a;\n  newPointData.b = cdi.b;\n  newPointData.c = cdi.c;\n  newPointData.xLabelVal = undefined;\n  newPointData.yLabelVal = undefined;\n  var ternary = newPointData.subplot;\n  newPointData.aLabel = Axes.tickText(ternary.aaxis, cdi.a, 'hover').text;\n  newPointData.bLabel = Axes.tickText(ternary.baxis, cdi.b, 'hover').text;\n  newPointData.cLabel = Axes.tickText(ternary.caxis, cdi.c, 'hover').text;\n  var trace = newPointData.trace;\n  var hoverinfo = cdi.hi || trace.hoverinfo;\n  var text = [];\n\n  function textPart(ax, val) {\n    text.push(ax._hovertitle + ': ' + val);\n  }\n\n  if (!trace.hovertemplate) {\n    var parts = hoverinfo.split('+');\n    if (parts.indexOf('all') !== -1) parts = ['a', 'b', 'c'];\n    if (parts.indexOf('a') !== -1) textPart(ternary.aaxis, newPointData.aLabel);\n    if (parts.indexOf('b') !== -1) textPart(ternary.baxis, newPointData.bLabel);\n    if (parts.indexOf('c') !== -1) textPart(ternary.caxis, newPointData.cLabel);\n  }\n\n  newPointData.extraText = text.join('<br>');\n  newPointData.hovertemplate = trace.hovertemplate;\n  return scatterPointData;\n};","map":null,"metadata":{},"sourceType":"script"}