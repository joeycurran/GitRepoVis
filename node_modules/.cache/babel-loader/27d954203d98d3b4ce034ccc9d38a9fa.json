{"ast":null,"code":"\"use strict\";\n\nvar twoProduct = require(\"two-product\");\n\nvar robustSum = require(\"robust-sum\");\n\nvar robustScale = require(\"robust-scale\");\n\nvar compress = require(\"robust-compress\");\n\nvar NUM_EXPANDED = 6;\n\nfunction cofactor(m, c) {\n  var result = new Array(m.length - 1);\n\n  for (var i = 1; i < m.length; ++i) {\n    var r = result[i - 1] = new Array(m.length - 1);\n\n    for (var j = 0, k = 0; j < m.length; ++j) {\n      if (j === c) {\n        continue;\n      }\n\n      r[k++] = m[i][j];\n    }\n  }\n\n  return result;\n}\n\nfunction matrix(n) {\n  var result = new Array(n);\n\n  for (var i = 0; i < n; ++i) {\n    result[i] = new Array(n);\n\n    for (var j = 0; j < n; ++j) {\n      result[i][j] = [\"m[\", i, \"][\", j, \"]\"].join(\"\");\n    }\n  }\n\n  return result;\n}\n\nfunction sign(n) {\n  if (n & 1) {\n    return \"-\";\n  }\n\n  return \"\";\n}\n\nfunction generateSum(expr) {\n  if (expr.length === 1) {\n    return expr[0];\n  } else if (expr.length === 2) {\n    return [\"sum(\", expr[0], \",\", expr[1], \")\"].join(\"\");\n  } else {\n    var m = expr.length >> 1;\n    return [\"sum(\", generateSum(expr.slice(0, m)), \",\", generateSum(expr.slice(m)), \")\"].join(\"\");\n  }\n}\n\nfunction determinant(m) {\n  if (m.length === 2) {\n    return [\"sum(prod(\", m[0][0], \",\", m[1][1], \"),prod(-\", m[0][1], \",\", m[1][0], \"))\"].join(\"\");\n  } else {\n    var expr = [];\n\n    for (var i = 0; i < m.length; ++i) {\n      expr.push([\"scale(\", determinant(cofactor(m, i)), \",\", sign(i), m[0][i], \")\"].join(\"\"));\n    }\n\n    return generateSum(expr);\n  }\n}\n\nfunction compileDeterminant(n) {\n  var proc = new Function(\"sum\", \"scale\", \"prod\", \"compress\", [\"function robustDeterminant\", n, \"(m){return compress(\", determinant(matrix(n)), \")};return robustDeterminant\", n].join(\"\"));\n  return proc(robustSum, robustScale, twoProduct, compress);\n}\n\nvar CACHE = [function robustDeterminant0() {\n  return [0];\n}, function robustDeterminant1(m) {\n  return [m[0][0]];\n}];\n\nfunction generateDispatch() {\n  while (CACHE.length < NUM_EXPANDED) {\n    CACHE.push(compileDeterminant(CACHE.length));\n  }\n\n  var procArgs = [];\n  var code = [\"function robustDeterminant(m){switch(m.length){\"];\n\n  for (var i = 0; i < NUM_EXPANDED; ++i) {\n    procArgs.push(\"det\" + i);\n    code.push(\"case \", i, \":return det\", i, \"(m);\");\n  }\n\n  code.push(\"}\\\nvar det=CACHE[m.length];\\\nif(!det)\\\ndet=CACHE[m.length]=gen(m.length);\\\nreturn det(m);\\\n}\\\nreturn robustDeterminant\");\n  procArgs.push(\"CACHE\", \"gen\", code.join(\"\"));\n  var proc = Function.apply(undefined, procArgs);\n  module.exports = proc.apply(undefined, CACHE.concat([CACHE, compileDeterminant]));\n\n  for (var i = 0; i < CACHE.length; ++i) {\n    module.exports[i] = CACHE[i];\n  }\n}\n\ngenerateDispatch();","map":null,"metadata":{},"sourceType":"script"}