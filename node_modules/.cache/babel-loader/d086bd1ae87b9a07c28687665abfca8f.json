{"ast":null,"code":"'use strict';\n\nvar createUniformWrapper = require('./lib/create-uniforms');\n\nvar createAttributeWrapper = require('./lib/create-attributes');\n\nvar makeReflect = require('./lib/reflect');\n\nvar shaderCache = require('./lib/shader-cache');\n\nvar runtime = require('./lib/runtime-reflect');\n\nvar GLError = require(\"./lib/GLError\"); //Shader object\n\n\nfunction Shader(gl) {\n  this.gl = gl;\n  this.gl.lastAttribCount = 0; // fixme where else should we store info, safe but not nice on the gl object\n  //Default initialize these to null\n\n  this._vref = this._fref = this._relink = this.vertShader = this.fragShader = this.program = this.attributes = this.uniforms = this.types = null;\n}\n\nvar proto = Shader.prototype;\n\nproto.bind = function () {\n  if (!this.program) {\n    this._relink();\n  } // ensuring that we have the right number of enabled vertex attributes\n\n\n  var i;\n  var newAttribCount = this.gl.getProgramParameter(this.program, this.gl.ACTIVE_ATTRIBUTES); // more robust approach\n  //var newAttribCount = Object.keys(this.attributes).length // avoids the probably immaterial introspection slowdown\n\n  var oldAttribCount = this.gl.lastAttribCount;\n\n  if (newAttribCount > oldAttribCount) {\n    for (i = oldAttribCount; i < newAttribCount; i++) {\n      this.gl.enableVertexAttribArray(i);\n    }\n  } else if (oldAttribCount > newAttribCount) {\n    for (i = newAttribCount; i < oldAttribCount; i++) {\n      this.gl.disableVertexAttribArray(i);\n    }\n  }\n\n  this.gl.lastAttribCount = newAttribCount;\n  this.gl.useProgram(this.program);\n};\n\nproto.dispose = function () {\n  // disabling vertex attributes so new shader starts with zero\n  // and it's also useful if all shaders are disposed but the\n  // gl context is reused for subsequent replotting\n  var oldAttribCount = this.gl.lastAttribCount;\n\n  for (var i = 0; i < oldAttribCount; i++) {\n    this.gl.disableVertexAttribArray(i);\n  }\n\n  this.gl.lastAttribCount = 0;\n\n  if (this._fref) {\n    this._fref.dispose();\n  }\n\n  if (this._vref) {\n    this._vref.dispose();\n  }\n\n  this.attributes = this.types = this.vertShader = this.fragShader = this.program = this._relink = this._fref = this._vref = null;\n};\n\nfunction compareAttributes(a, b) {\n  if (a.name < b.name) {\n    return -1;\n  }\n\n  return 1;\n} //Update export hook for glslify-live\n\n\nproto.update = function (vertSource, fragSource, uniforms, attributes) {\n  //If only one object passed, assume glslify style output\n  if (!fragSource || arguments.length === 1) {\n    var obj = vertSource;\n    vertSource = obj.vertex;\n    fragSource = obj.fragment;\n    uniforms = obj.uniforms;\n    attributes = obj.attributes;\n  }\n\n  var wrapper = this;\n  var gl = wrapper.gl; //Compile vertex and fragment shaders\n\n  var pvref = wrapper._vref;\n  wrapper._vref = shaderCache.shader(gl, gl.VERTEX_SHADER, vertSource);\n\n  if (pvref) {\n    pvref.dispose();\n  }\n\n  wrapper.vertShader = wrapper._vref.shader;\n  var pfref = this._fref;\n  wrapper._fref = shaderCache.shader(gl, gl.FRAGMENT_SHADER, fragSource);\n\n  if (pfref) {\n    pfref.dispose();\n  }\n\n  wrapper.fragShader = wrapper._fref.shader; //If uniforms/attributes is not specified, use RT reflection\n\n  if (!uniforms || !attributes) {\n    //Create initial test program\n    var testProgram = gl.createProgram();\n    gl.attachShader(testProgram, wrapper.fragShader);\n    gl.attachShader(testProgram, wrapper.vertShader);\n    gl.linkProgram(testProgram);\n\n    if (!gl.getProgramParameter(testProgram, gl.LINK_STATUS)) {\n      var errLog = gl.getProgramInfoLog(testProgram);\n      throw new GLError(errLog, 'Error linking program:' + errLog);\n    } //Load data from runtime\n\n\n    uniforms = uniforms || runtime.uniforms(gl, testProgram);\n    attributes = attributes || runtime.attributes(gl, testProgram); //Release test program\n\n    gl.deleteProgram(testProgram);\n  } //Sort attributes lexicographically\n  // overrides undefined WebGL behavior for attribute locations\n\n\n  attributes = attributes.slice();\n  attributes.sort(compareAttributes); //Convert attribute types, read out locations\n\n  var attributeUnpacked = [];\n  var attributeNames = [];\n  var attributeLocations = [];\n  var i;\n\n  for (i = 0; i < attributes.length; ++i) {\n    var attr = attributes[i];\n\n    if (attr.type.indexOf('mat') >= 0) {\n      var size = attr.type.charAt(attr.type.length - 1) | 0;\n      var locVector = new Array(size);\n\n      for (var j = 0; j < size; ++j) {\n        locVector[j] = attributeLocations.length;\n        attributeNames.push(attr.name + '[' + j + ']');\n\n        if (typeof attr.location === 'number') {\n          attributeLocations.push(attr.location + j);\n        } else if (Array.isArray(attr.location) && attr.location.length === size && typeof attr.location[j] === 'number') {\n          attributeLocations.push(attr.location[j] | 0);\n        } else {\n          attributeLocations.push(-1);\n        }\n      }\n\n      attributeUnpacked.push({\n        name: attr.name,\n        type: attr.type,\n        locations: locVector\n      });\n    } else {\n      attributeUnpacked.push({\n        name: attr.name,\n        type: attr.type,\n        locations: [attributeLocations.length]\n      });\n      attributeNames.push(attr.name);\n\n      if (typeof attr.location === 'number') {\n        attributeLocations.push(attr.location | 0);\n      } else {\n        attributeLocations.push(-1);\n      }\n    }\n  } //For all unspecified attributes, assign them lexicographically min attribute\n\n\n  var curLocation = 0;\n\n  for (i = 0; i < attributeLocations.length; ++i) {\n    if (attributeLocations[i] < 0) {\n      while (attributeLocations.indexOf(curLocation) >= 0) {\n        curLocation += 1;\n      }\n\n      attributeLocations[i] = curLocation;\n    }\n  } //Rebuild program and recompute all uniform locations\n\n\n  var uniformLocations = new Array(uniforms.length);\n\n  function relink() {\n    wrapper.program = shaderCache.program(gl, wrapper._vref, wrapper._fref, attributeNames, attributeLocations);\n\n    for (var i = 0; i < uniforms.length; ++i) {\n      uniformLocations[i] = gl.getUniformLocation(wrapper.program, uniforms[i].name);\n    }\n  } //Perform initial linking, reuse program used for reflection\n\n\n  relink(); //Save relinking procedure, defer until runtime\n\n  wrapper._relink = relink; //Generate type info\n\n  wrapper.types = {\n    uniforms: makeReflect(uniforms),\n    attributes: makeReflect(attributes)\n  }; //Generate attribute wrappers\n\n  wrapper.attributes = createAttributeWrapper(gl, wrapper, attributeUnpacked, attributeLocations); //Generate uniform wrappers\n\n  Object.defineProperty(wrapper, 'uniforms', createUniformWrapper(gl, wrapper, uniforms, uniformLocations));\n}; //Compiles and links a shader program with the given attribute and vertex list\n\n\nfunction createShader(gl, vertSource, fragSource, uniforms, attributes) {\n  var shader = new Shader(gl);\n  shader.update(vertSource, fragSource, uniforms, attributes);\n  return shader;\n}\n\nmodule.exports = createShader;","map":null,"metadata":{},"sourceType":"script"}