{"ast":null,"code":"'use strict';\n\nvar createShader = require('gl-shader');\n\nvar createBuffer = require('gl-buffer');\n\nvar SHADERS = require('./lib/shaders');\n\nmodule.exports = createSelectBox;\n\nfunction SelectBox(plot, boxBuffer, boxShader) {\n  this.plot = plot;\n  this.boxBuffer = boxBuffer;\n  this.boxShader = boxShader;\n  this.enabled = true;\n  this.selectBox = [Infinity, Infinity, -Infinity, -Infinity];\n  this.borderColor = [0, 0, 0, 1];\n  this.innerFill = false;\n  this.innerColor = [0, 0, 0, 0.25];\n  this.outerFill = true;\n  this.outerColor = [0, 0, 0, 0.5];\n  this.borderWidth = 10;\n}\n\nvar proto = SelectBox.prototype;\n\nproto.draw = function () {\n  if (!this.enabled) {\n    return;\n  }\n\n  var plot = this.plot;\n  var selectBox = this.selectBox;\n  var lineWidth = this.borderWidth;\n  var innerFill = this.innerFill;\n  var innerColor = this.innerColor;\n  var outerFill = this.outerFill;\n  var outerColor = this.outerColor;\n  var borderColor = this.borderColor;\n  var boxes = plot.box;\n  var screenBox = plot.screenBox;\n  var dataBox = plot.dataBox;\n  var viewBox = plot.viewBox;\n  var pixelRatio = plot.pixelRatio; //Map select box into pixel coordinates\n\n  var loX = (selectBox[0] - dataBox[0]) * (viewBox[2] - viewBox[0]) / (dataBox[2] - dataBox[0]) + viewBox[0];\n  var loY = (selectBox[1] - dataBox[1]) * (viewBox[3] - viewBox[1]) / (dataBox[3] - dataBox[1]) + viewBox[1];\n  var hiX = (selectBox[2] - dataBox[0]) * (viewBox[2] - viewBox[0]) / (dataBox[2] - dataBox[0]) + viewBox[0];\n  var hiY = (selectBox[3] - dataBox[1]) * (viewBox[3] - viewBox[1]) / (dataBox[3] - dataBox[1]) + viewBox[1];\n  loX = Math.max(loX, viewBox[0]);\n  loY = Math.max(loY, viewBox[1]);\n  hiX = Math.min(hiX, viewBox[2]);\n  hiY = Math.min(hiY, viewBox[3]);\n\n  if (hiX < loX || hiY < loY) {\n    return;\n  }\n\n  boxes.bind(); //Draw box\n\n  var screenWidth = screenBox[2] - screenBox[0];\n  var screenHeight = screenBox[3] - screenBox[1];\n\n  if (this.outerFill) {\n    boxes.drawBox(0, 0, screenWidth, loY, outerColor);\n    boxes.drawBox(0, loY, loX, hiY, outerColor);\n    boxes.drawBox(0, hiY, screenWidth, screenHeight, outerColor);\n    boxes.drawBox(hiX, loY, screenWidth, hiY, outerColor);\n  }\n\n  if (this.innerFill) {\n    boxes.drawBox(loX, loY, hiX, hiY, innerColor);\n  } //Draw border\n\n\n  if (lineWidth > 0) {\n    //Draw border\n    var w = lineWidth * pixelRatio;\n    boxes.drawBox(loX - w, loY - w, hiX + w, loY + w, borderColor);\n    boxes.drawBox(loX - w, hiY - w, hiX + w, hiY + w, borderColor);\n    boxes.drawBox(loX - w, loY - w, loX + w, hiY + w, borderColor);\n    boxes.drawBox(hiX - w, loY - w, hiX + w, hiY + w, borderColor);\n  }\n};\n\nproto.update = function (options) {\n  options = options || {};\n  this.innerFill = !!options.innerFill;\n  this.outerFill = !!options.outerFill;\n  this.innerColor = (options.innerColor || [0, 0, 0, 0.5]).slice();\n  this.outerColor = (options.outerColor || [0, 0, 0, 0.5]).slice();\n  this.borderColor = (options.borderColor || [0, 0, 0, 1]).slice();\n  this.borderWidth = options.borderWidth || 0;\n  this.selectBox = (options.selectBox || this.selectBox).slice();\n};\n\nproto.dispose = function () {\n  this.boxBuffer.dispose();\n  this.boxShader.dispose();\n  this.plot.removeOverlay(this);\n};\n\nfunction createSelectBox(plot, options) {\n  var gl = plot.gl;\n  var buffer = createBuffer(gl, [0, 0, 0, 1, 1, 0, 1, 1]);\n  var shader = createShader(gl, SHADERS.boxVertex, SHADERS.boxFragment);\n  var selectBox = new SelectBox(plot, buffer, shader);\n  selectBox.update(options);\n  plot.addOverlay(selectBox);\n  return selectBox;\n}","map":null,"metadata":{},"sourceType":"script"}