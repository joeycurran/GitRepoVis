{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n'use strict';\n\nvar d3 = require('d3');\n\nvar Color = require('../../components/color');\n\nvar Lib = require('../../lib');\n\nvar helpers = require('../sunburst/helpers');\n\nfunction style(gd) {\n  gd._fullLayout._treemaplayer.selectAll('.trace').each(function (cd) {\n    var gTrace = d3.select(this);\n    var cd0 = cd[0];\n    var trace = cd0.trace;\n    gTrace.style('opacity', trace.opacity);\n    gTrace.selectAll('path.surface').each(function (pt) {\n      d3.select(this).call(styleOne, pt, trace, {\n        hovered: false\n      });\n    });\n  });\n}\n\nfunction styleOne(s, pt, trace, opts) {\n  var hovered = (opts || {}).hovered;\n  var cdi = pt.data.data;\n  var ptNumber = cdi.i;\n  var lineColor;\n  var lineWidth;\n  var fillColor = cdi.color;\n  var isRoot = helpers.isHierarchyRoot(pt);\n  var opacity = 1;\n\n  if (hovered) {\n    lineColor = trace._hovered.marker.line.color;\n    lineWidth = trace._hovered.marker.line.width;\n  } else {\n    if (isRoot && fillColor === 'rgba(0,0,0,0)') {\n      opacity = 0;\n      lineColor = 'rgba(0,0,0,0)';\n      lineWidth = 0;\n    } else {\n      lineColor = Lib.castOption(trace, ptNumber, 'marker.line.color') || Color.defaultLine;\n      lineWidth = Lib.castOption(trace, ptNumber, 'marker.line.width') || 0;\n\n      if (!trace._hasColorscale && !pt.onPathbar) {\n        var depthfade = trace.marker.depthfade;\n\n        if (depthfade) {\n          var fadedColor = Color.combine(Color.addOpacity(trace._backgroundColor, 0.75), fillColor);\n          var n;\n\n          if (depthfade === true) {\n            var maxDepth = helpers.getMaxDepth(trace);\n\n            if (isFinite(maxDepth)) {\n              if (helpers.isLeaf(pt)) {\n                n = 0;\n              } else {\n                n = trace._maxVisibleLayers - (pt.data.depth - trace._entryDepth);\n              }\n            } else {\n              n = pt.data.height + 1;\n            }\n          } else {\n            // i.e. case of depthfade === 'reversed'\n            n = pt.data.depth - trace._entryDepth;\n            if (!trace._atRootLevel) n++;\n          }\n\n          if (n > 0) {\n            for (var i = 0; i < n; i++) {\n              var ratio = 0.5 * i / n;\n              fillColor = Color.combine(Color.addOpacity(fadedColor, ratio), fillColor);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  s.style('stroke-width', lineWidth).call(Color.fill, fillColor).call(Color.stroke, lineColor).style('opacity', opacity);\n}\n\nmodule.exports = {\n  style: style,\n  styleOne: styleOne\n};","map":null,"metadata":{},"sourceType":"script"}