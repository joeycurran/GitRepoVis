{"ast":null,"code":"var sprintf = require('sprintf-js').sprintf;\n\nvar glConstants = require('gl-constants/lookup');\n\nvar shaderName = require('glsl-shader-name');\n\nvar addLineNumbers = require('add-line-numbers');\n\nmodule.exports = formatCompilerError;\n\nfunction formatCompilerError(errLog, src, type) {\n  \"use strict\";\n\n  var name = shaderName(src) || 'of unknown name (see npm glsl-shader-name)';\n  var typeName = 'unknown type';\n\n  if (type !== undefined) {\n    typeName = type === glConstants.FRAGMENT_SHADER ? 'fragment' : 'vertex';\n  }\n\n  var longForm = sprintf('Error compiling %s shader %s:\\n', typeName, name);\n  var shortForm = sprintf(\"%s%s\", longForm, errLog);\n  var errorStrings = errLog.split('\\n');\n  var errors = {};\n\n  for (var i = 0; i < errorStrings.length; i++) {\n    var errorString = errorStrings[i];\n    if (errorString === '' || errorString === \"\\0\") continue;\n    var lineNo = parseInt(errorString.split(':')[2]);\n\n    if (isNaN(lineNo)) {\n      throw new Error(sprintf('Could not parse error: %s', errorString));\n    }\n\n    errors[lineNo] = errorString;\n  }\n\n  var lines = addLineNumbers(src).split('\\n');\n\n  for (var i = 0; i < lines.length; i++) {\n    if (!errors[i + 3] && !errors[i + 2] && !errors[i + 1]) continue;\n    var line = lines[i];\n    longForm += line + '\\n';\n\n    if (errors[i + 1]) {\n      var e = errors[i + 1];\n      e = e.substr(e.split(':', 3).join(':').length + 1).trim();\n      longForm += sprintf('^^^ %s\\n\\n', e);\n    }\n  }\n\n  return {\n    long: longForm.trim(),\n    short: shortForm.trim()\n  };\n}","map":null,"metadata":{},"sourceType":"script"}