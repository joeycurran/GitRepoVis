{"ast":null,"code":"\"use strict\";\n\nvar dup = require(\"dup\");\n\nvar solve = require(\"robust-linear-solve\");\n\nfunction dot(a, b) {\n  var s = 0.0;\n  var d = a.length;\n\n  for (var i = 0; i < d; ++i) {\n    s += a[i] * b[i];\n  }\n\n  return s;\n}\n\nfunction barycentricCircumcenter(points) {\n  var N = points.length;\n\n  if (N === 0) {\n    return [];\n  }\n\n  var D = points[0].length;\n  var A = dup([points.length + 1, points.length + 1], 1.0);\n  var b = dup([points.length + 1], 1.0);\n  A[N][N] = 0.0;\n\n  for (var i = 0; i < N; ++i) {\n    for (var j = 0; j <= i; ++j) {\n      A[j][i] = A[i][j] = 2.0 * dot(points[i], points[j]);\n    }\n\n    b[i] = dot(points[i], points[i]);\n  }\n\n  var x = solve(A, b);\n  var denom = 0.0;\n  var h = x[N + 1];\n\n  for (var i = 0; i < h.length; ++i) {\n    denom += h[i];\n  }\n\n  var y = new Array(N);\n\n  for (var i = 0; i < N; ++i) {\n    var h = x[i];\n    var numer = 0.0;\n\n    for (var j = 0; j < h.length; ++j) {\n      numer += h[j];\n    }\n\n    y[i] = numer / denom;\n  }\n\n  return y;\n}\n\nfunction circumcenter(points) {\n  if (points.length === 0) {\n    return [];\n  }\n\n  var D = points[0].length;\n  var result = dup([D]);\n  var weights = barycentricCircumcenter(points);\n\n  for (var i = 0; i < points.length; ++i) {\n    for (var j = 0; j < D; ++j) {\n      result[j] += points[i][j] * weights[i];\n    }\n  }\n\n  return result;\n}\n\ncircumcenter.barycenetric = barycentricCircumcenter;\nmodule.exports = circumcenter;","map":null,"metadata":{},"sourceType":"script"}