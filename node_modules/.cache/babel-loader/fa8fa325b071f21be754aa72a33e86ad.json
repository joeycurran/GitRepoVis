{"ast":null,"code":"'use strict';\n\nmodule.exports = createBackgroundCube;\n\nvar createBuffer = require('gl-buffer');\n\nvar createVAO = require('gl-vao');\n\nvar createShader = require('./shaders').bg;\n\nfunction BackgroundCube(gl, buffer, vao, shader) {\n  this.gl = gl;\n  this.buffer = buffer;\n  this.vao = vao;\n  this.shader = shader;\n}\n\nvar proto = BackgroundCube.prototype;\n\nproto.draw = function (model, view, projection, bounds, enable, colors) {\n  var needsBG = false;\n\n  for (var i = 0; i < 3; ++i) {\n    needsBG = needsBG || enable[i];\n  }\n\n  if (!needsBG) {\n    return;\n  }\n\n  var gl = this.gl;\n  gl.enable(gl.POLYGON_OFFSET_FILL);\n  gl.polygonOffset(1, 2);\n  this.shader.bind();\n  this.shader.uniforms = {\n    model: model,\n    view: view,\n    projection: projection,\n    bounds: bounds,\n    enable: enable,\n    colors: colors\n  };\n  this.vao.bind();\n  this.vao.draw(this.gl.TRIANGLES, 36);\n  this.vao.unbind();\n  gl.disable(gl.POLYGON_OFFSET_FILL);\n};\n\nproto.dispose = function () {\n  this.vao.dispose();\n  this.buffer.dispose();\n  this.shader.dispose();\n};\n\nfunction createBackgroundCube(gl) {\n  //Create cube vertices\n  var vertices = [];\n  var indices = [];\n  var ptr = 0;\n\n  for (var d = 0; d < 3; ++d) {\n    var u = (d + 1) % 3;\n    var v = (d + 2) % 3;\n    var x = [0, 0, 0];\n    var c = [0, 0, 0];\n\n    for (var s = -1; s <= 1; s += 2) {\n      indices.push(ptr, ptr + 2, ptr + 1, ptr + 1, ptr + 2, ptr + 3);\n      x[d] = s;\n      c[d] = s;\n\n      for (var i = -1; i <= 1; i += 2) {\n        x[u] = i;\n\n        for (var j = -1; j <= 1; j += 2) {\n          x[v] = j;\n          vertices.push(x[0], x[1], x[2], c[0], c[1], c[2]);\n          ptr += 1;\n        }\n      } //Swap u and v\n\n\n      var tt = u;\n      u = v;\n      v = tt;\n    }\n  } //Allocate buffer and vertex array\n\n\n  var buffer = createBuffer(gl, new Float32Array(vertices));\n  var elements = createBuffer(gl, new Uint16Array(indices), gl.ELEMENT_ARRAY_BUFFER);\n  var vao = createVAO(gl, [{\n    buffer: buffer,\n    type: gl.FLOAT,\n    size: 3,\n    offset: 0,\n    stride: 24\n  }, {\n    buffer: buffer,\n    type: gl.FLOAT,\n    size: 3,\n    offset: 12,\n    stride: 24\n  }], elements); //Create shader object\n\n  var shader = createShader(gl);\n  shader.attributes.position.location = 0;\n  shader.attributes.normal.location = 1;\n  return new BackgroundCube(gl, buffer, vao, shader);\n}","map":null,"metadata":{},"sourceType":"script"}