{"ast":null,"code":"'use strict';\n\nmodule.exports = createAttributeWrapper;\n\nvar GLError = require(\"./GLError\");\n\nfunction ShaderAttribute(gl, wrapper, index, locations, dimension, constFunc) {\n  this._gl = gl;\n  this._wrapper = wrapper;\n  this._index = index;\n  this._locations = locations;\n  this._dimension = dimension;\n  this._constFunc = constFunc;\n}\n\nvar proto = ShaderAttribute.prototype;\n\nproto.pointer = function setAttribPointer(type, normalized, stride, offset) {\n  var self = this;\n  var gl = self._gl;\n  var location = self._locations[self._index];\n  gl.vertexAttribPointer(location, self._dimension, type || gl.FLOAT, !!normalized, stride || 0, offset || 0);\n  gl.enableVertexAttribArray(location);\n};\n\nproto.set = function (x0, x1, x2, x3) {\n  return this._constFunc(this._locations[this._index], x0, x1, x2, x3);\n};\n\nObject.defineProperty(proto, 'location', {\n  get: function () {\n    return this._locations[this._index];\n  },\n  set: function (v) {\n    if (v !== this._locations[this._index]) {\n      this._locations[this._index] = v | 0;\n      this._wrapper.program = null;\n    }\n\n    return v | 0;\n  }\n}); //Adds a vector attribute to obj\n\nfunction addVectorAttribute(gl, wrapper, index, locations, dimension, obj, name) {\n  //Construct constant function\n  var constFuncArgs = ['gl', 'v'];\n  var varNames = [];\n\n  for (var i = 0; i < dimension; ++i) {\n    constFuncArgs.push('x' + i);\n    varNames.push('x' + i);\n  }\n\n  constFuncArgs.push('if(x0.length===void 0){return gl.vertexAttrib' + dimension + 'f(v,' + varNames.join() + ')}else{return gl.vertexAttrib' + dimension + 'fv(v,x0)}');\n  var constFunc = Function.apply(null, constFuncArgs); //Create attribute wrapper\n\n  var attr = new ShaderAttribute(gl, wrapper, index, locations, dimension, constFunc); //Create accessor\n\n  Object.defineProperty(obj, name, {\n    set: function (x) {\n      gl.disableVertexAttribArray(locations[index]);\n      constFunc(gl, locations[index], x);\n      return x;\n    },\n    get: function () {\n      return attr;\n    },\n    enumerable: true\n  });\n}\n\nfunction addMatrixAttribute(gl, wrapper, index, locations, dimension, obj, name) {\n  var parts = new Array(dimension);\n  var attrs = new Array(dimension);\n\n  for (var i = 0; i < dimension; ++i) {\n    addVectorAttribute(gl, wrapper, index[i], locations, dimension, parts, i);\n    attrs[i] = parts[i];\n  }\n\n  Object.defineProperty(parts, 'location', {\n    set: function (v) {\n      if (Array.isArray(v)) {\n        for (var i = 0; i < dimension; ++i) {\n          attrs[i].location = v[i];\n        }\n      } else {\n        for (var i = 0; i < dimension; ++i) {\n          attrs[i].location = v + i;\n        }\n      }\n\n      return v;\n    },\n    get: function () {\n      var result = new Array(dimension);\n\n      for (var i = 0; i < dimension; ++i) {\n        result[i] = locations[index[i]];\n      }\n\n      return result;\n    },\n    enumerable: true\n  });\n\n  parts.pointer = function (type, normalized, stride, offset) {\n    type = type || gl.FLOAT;\n    normalized = !!normalized;\n    stride = stride || dimension * dimension;\n    offset = offset || 0;\n\n    for (var i = 0; i < dimension; ++i) {\n      var location = locations[index[i]];\n      gl.vertexAttribPointer(location, dimension, type, normalized, stride, offset + i * dimension);\n      gl.enableVertexAttribArray(location);\n    }\n  };\n\n  var scratch = new Array(dimension);\n  var vertexAttrib = gl['vertexAttrib' + dimension + 'fv'];\n  Object.defineProperty(obj, name, {\n    set: function (x) {\n      for (var i = 0; i < dimension; ++i) {\n        var loc = locations[index[i]];\n        gl.disableVertexAttribArray(loc);\n\n        if (Array.isArray(x[0])) {\n          vertexAttrib.call(gl, loc, x[i]);\n        } else {\n          for (var j = 0; j < dimension; ++j) {\n            scratch[j] = x[dimension * i + j];\n          }\n\n          vertexAttrib.call(gl, loc, scratch);\n        }\n      }\n\n      return x;\n    },\n    get: function () {\n      return parts;\n    },\n    enumerable: true\n  });\n} //Create shims for attributes\n\n\nfunction createAttributeWrapper(gl, wrapper, attributes, locations) {\n  var obj = {};\n\n  for (var i = 0, n = attributes.length; i < n; ++i) {\n    var a = attributes[i];\n    var name = a.name;\n    var type = a.type;\n    var locs = a.locations;\n\n    switch (type) {\n      case 'bool':\n      case 'int':\n      case 'float':\n        addVectorAttribute(gl, wrapper, locs[0], locations, 1, obj, name);\n        break;\n\n      default:\n        if (type.indexOf('vec') >= 0) {\n          var d = type.charCodeAt(type.length - 1) - 48;\n\n          if (d < 2 || d > 4) {\n            throw new GLError('', 'Invalid data type for attribute ' + name + ': ' + type);\n          }\n\n          addVectorAttribute(gl, wrapper, locs[0], locations, d, obj, name);\n        } else if (type.indexOf('mat') >= 0) {\n          var d = type.charCodeAt(type.length - 1) - 48;\n\n          if (d < 2 || d > 4) {\n            throw new GLError('', 'Invalid data type for attribute ' + name + ': ' + type);\n          }\n\n          addMatrixAttribute(gl, wrapper, locs, locations, d, obj, name);\n        } else {\n          throw new GLError('', 'Unknown data type for attribute ' + name + ': ' + type);\n        }\n\n        break;\n    }\n  }\n\n  return obj;\n}","map":null,"metadata":{},"sourceType":"script"}