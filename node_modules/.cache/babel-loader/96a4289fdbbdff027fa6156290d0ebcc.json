{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n'use strict';\n\nvar plotAttrs = require('../../plots/attributes');\n\nvar hovertemplateAttrs = require('../../plots/template_attributes').hovertemplateAttrs;\n\nvar texttemplateAttrs = require('../../plots/template_attributes').texttemplateAttrs;\n\nvar colorScaleAttrs = require('../../components/colorscale/attributes');\n\nvar domainAttrs = require('../../plots/domain').attributes;\n\nvar pieAttrs = require('../pie/attributes');\n\nvar constants = require('./constants');\n\nvar extendFlat = require('../../lib/extend').extendFlat;\n\nmodule.exports = {\n  labels: {\n    valType: 'data_array',\n    editType: 'calc',\n    description: ['Sets the labels of each of the sectors.'].join(' ')\n  },\n  parents: {\n    valType: 'data_array',\n    editType: 'calc',\n    description: ['Sets the parent sectors for each of the sectors.', 'Empty string items \\'\\' are understood to reference', 'the root node in the hierarchy.', 'If `ids` is filled, `parents` items are understood to be \"ids\" themselves.', 'When `ids` is not set, plotly attempts to find matching items in `labels`,', 'but beware they must be unique.'].join(' ')\n  },\n  values: {\n    valType: 'data_array',\n    editType: 'calc',\n    description: ['Sets the values associated with each of the sectors.', 'Use with `branchvalues` to determine how the values are summed.'].join(' ')\n  },\n  branchvalues: {\n    valType: 'enumerated',\n    values: ['remainder', 'total'],\n    dflt: 'remainder',\n    editType: 'calc',\n    role: 'info',\n    description: ['Determines how the items in `values` are summed.', 'When set to *total*, items in `values` are taken to be value of all its descendants.', 'When set to *remainder*, items in `values` corresponding to the root and the branches sectors', 'are taken to be the extra part not part of the sum of the values at their leaves.'].join(' ')\n  },\n  count: {\n    valType: 'flaglist',\n    flags: ['branches', 'leaves'],\n    dflt: 'leaves',\n    editType: 'calc',\n    role: 'info',\n    description: ['Determines default for `values` when it is not provided,', 'by inferring a 1 for each of the *leaves* and/or *branches*, otherwise 0.'].join(' ')\n  },\n  level: {\n    valType: 'any',\n    editType: 'plot',\n    anim: true,\n    role: 'info',\n    description: ['Sets the level from which this trace hierarchy is rendered.', 'Set `level` to `\\'\\'` to start from the root node in the hierarchy.', 'Must be an \"id\" if `ids` is filled in, otherwise plotly attempts to find a matching', 'item in `labels`.'].join(' ')\n  },\n  maxdepth: {\n    valType: 'integer',\n    editType: 'plot',\n    role: 'info',\n    dflt: -1,\n    description: ['Sets the number of rendered sectors from any given `level`.', 'Set `maxdepth` to *-1* to render all the levels in the hierarchy.'].join(' ')\n  },\n  marker: extendFlat({\n    colors: {\n      valType: 'data_array',\n      editType: 'calc',\n      description: ['Sets the color of each sector of this trace.', 'If not specified, the default trace color set is used', 'to pick the sector colors.'].join(' ')\n    },\n    // colorinheritance: {\n    //     valType: 'enumerated',\n    //     values: ['per-branch', 'per-label', false]\n    // },\n    line: {\n      color: extendFlat({}, pieAttrs.marker.line.color, {\n        dflt: null,\n        description: ['Sets the color of the line enclosing each sector.', 'Defaults to the `paper_bgcolor` value.'].join(' ')\n      }),\n      width: extendFlat({}, pieAttrs.marker.line.width, {\n        dflt: 1\n      }),\n      editType: 'calc'\n    },\n    editType: 'calc'\n  }, colorScaleAttrs('marker', {\n    colorAttr: 'colors',\n    anim: false // TODO: set to anim: true?\n\n  })),\n  leaf: {\n    opacity: {\n      valType: 'number',\n      editType: 'style',\n      role: 'style',\n      min: 0,\n      max: 1,\n      description: ['Sets the opacity of the leaves. With colorscale', 'it is defaulted to 1; otherwise it is defaulted to 0.7'].join(' ')\n    },\n    editType: 'plot'\n  },\n  text: pieAttrs.text,\n  textinfo: {\n    valType: 'flaglist',\n    role: 'info',\n    flags: ['label', 'text', 'value', 'current path', 'percent root', 'percent entry', 'percent parent'],\n    extras: ['none'],\n    editType: 'plot',\n    description: ['Determines which trace information appear on the graph.'].join(' ')\n  },\n  // TODO: incorporate `label` and `value` in the eventData\n  texttemplate: texttemplateAttrs({\n    editType: 'plot'\n  }, {\n    keys: constants.eventDataKeys.concat(['label', 'value'])\n  }),\n  hovertext: pieAttrs.hovertext,\n  hoverinfo: extendFlat({}, plotAttrs.hoverinfo, {\n    flags: ['label', 'text', 'value', 'name', 'current path', 'percent root', 'percent entry', 'percent parent'],\n    dflt: 'label+text+value+name'\n  }),\n  hovertemplate: hovertemplateAttrs({}, {\n    keys: constants.eventDataKeys\n  }),\n  textfont: pieAttrs.textfont,\n  insidetextfont: pieAttrs.insidetextfont,\n  outsidetextfont: pieAttrs.outsidetextfont,\n  domain: domainAttrs({\n    name: 'sunburst',\n    trace: true,\n    editType: 'calc'\n  })\n};","map":null,"metadata":{},"sourceType":"script"}