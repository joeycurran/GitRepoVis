{"ast":null,"code":"\"use strict\";\n\nfunction compileSearch(funcName, predicate, reversed, extraArgs, useNdarray, earlyOut) {\n  var code = [\"function \", funcName, \"(a,l,h,\", extraArgs.join(\",\"), \"){\", earlyOut ? \"\" : \"var i=\", reversed ? \"l-1\" : \"h+1\", \";while(l<=h){\\\nvar m=(l+h)>>>1,x=a\", useNdarray ? \".get(m)\" : \"[m]\"];\n\n  if (earlyOut) {\n    if (predicate.indexOf(\"c\") < 0) {\n      code.push(\";if(x===y){return m}else if(x<=y){\");\n    } else {\n      code.push(\";var p=c(x,y);if(p===0){return m}else if(p<=0){\");\n    }\n  } else {\n    code.push(\";if(\", predicate, \"){i=m;\");\n  }\n\n  if (reversed) {\n    code.push(\"l=m+1}else{h=m-1}\");\n  } else {\n    code.push(\"h=m-1}else{l=m+1}\");\n  }\n\n  code.push(\"}\");\n\n  if (earlyOut) {\n    code.push(\"return -1};\");\n  } else {\n    code.push(\"return i};\");\n  }\n\n  return code.join(\"\");\n}\n\nfunction compileBoundsSearch(predicate, reversed, suffix, earlyOut) {\n  var result = new Function([compileSearch(\"A\", \"x\" + predicate + \"y\", reversed, [\"y\"], false, earlyOut), compileSearch(\"B\", \"x\" + predicate + \"y\", reversed, [\"y\"], true, earlyOut), compileSearch(\"P\", \"c(x,y)\" + predicate + \"0\", reversed, [\"y\", \"c\"], false, earlyOut), compileSearch(\"Q\", \"c(x,y)\" + predicate + \"0\", reversed, [\"y\", \"c\"], true, earlyOut), \"function dispatchBsearch\", suffix, \"(a,y,c,l,h){\\\nif(a.shape){\\\nif(typeof(c)==='function'){\\\nreturn Q(a,(l===undefined)?0:l|0,(h===undefined)?a.shape[0]-1:h|0,y,c)\\\n}else{\\\nreturn B(a,(c===undefined)?0:c|0,(l===undefined)?a.shape[0]-1:l|0,y)\\\n}}else{\\\nif(typeof(c)==='function'){\\\nreturn P(a,(l===undefined)?0:l|0,(h===undefined)?a.length-1:h|0,y,c)\\\n}else{\\\nreturn A(a,(c===undefined)?0:c|0,(l===undefined)?a.length-1:l|0,y)\\\n}}}\\\nreturn dispatchBsearch\", suffix].join(\"\"));\n  return result();\n}\n\nmodule.exports = {\n  ge: compileBoundsSearch(\">=\", false, \"GE\"),\n  gt: compileBoundsSearch(\">\", false, \"GT\"),\n  lt: compileBoundsSearch(\"<\", true, \"LT\"),\n  le: compileBoundsSearch(\"<=\", true, \"LE\"),\n  eq: compileBoundsSearch(\"-\", true, \"EQ\", true)\n};","map":null,"metadata":{},"sourceType":"script"}