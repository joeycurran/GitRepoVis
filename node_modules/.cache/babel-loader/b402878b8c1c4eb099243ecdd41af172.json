{"ast":null,"code":"'use strict';\n\nmodule.exports = createLines;\n\nvar createBuffer = require('gl-buffer');\n\nvar createShader = require('gl-shader');\n\nvar shaders = require('./shaders');\n\nfunction Lines(plot, vbo, shader) {\n  this.plot = plot;\n  this.vbo = vbo;\n  this.shader = shader;\n}\n\nvar proto = Lines.prototype;\n\nproto.bind = function () {\n  var shader = this.shader;\n  this.vbo.bind();\n  this.shader.bind();\n  shader.attributes.coord.pointer();\n  shader.uniforms.screenBox = this.plot.screenBox;\n};\n\nproto.drawLine = function () {\n  var start = [0, 0];\n  var end = [0, 0];\n  return function (startX, startY, endX, endY, width, color) {\n    var plot = this.plot;\n    var shader = this.shader;\n    var gl = plot.gl;\n    start[0] = startX;\n    start[1] = startY;\n    end[0] = endX;\n    end[1] = endY;\n    shader.uniforms.start = start;\n    shader.uniforms.end = end;\n    shader.uniforms.width = width * plot.pixelRatio;\n    shader.uniforms.color = color;\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n  };\n}();\n\nproto.dispose = function () {\n  this.vbo.dispose();\n  this.shader.dispose();\n};\n\nfunction createLines(plot) {\n  var gl = plot.gl;\n  var vbo = createBuffer(gl, [-1, -1, -1, 1, 1, -1, 1, 1]);\n  var shader = createShader(gl, shaders.lineVert, shaders.lineFrag);\n  var lines = new Lines(plot, vbo, shader);\n  return lines;\n}","map":null,"metadata":{},"sourceType":"script"}